import{_ as dn,u as it,j as ot,k as z,p as Ia,l as Fi,L as Dc,N as Nc,O as Lc,F as Bi,s as st,m as pe,q as _t,x as Nt,Q as Ic,R as Cn,S as Qe,U as Ma,V as Mc,W as Fa,X as $n,Y as Ba,Z as Kr,$ as Fc,a0 as Bc,a1 as jc,a as Uc,a2 as qc,a3 as Hc,a4 as Wc,a5 as zc,T as Vc,a6 as Dn,t as Si,a7 as Gc,c as Qc,a8 as Kc,E as Xc,G as Jc,a9 as Yc,z as Zc,g as eu,aa as tu}from"./queryDataset-42923bbf.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))o(s);new MutationObserver(s=>{for(const l of s)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function r(s){const l={};return s.integrity&&(l.integrity=s.integrity),s.referrerpolicy&&(l.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?l.credentials="include":s.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function o(s){if(s.ep)return;s.ep=!0;const l=r(s);fetch(s.href,l)}})();let Ps=class{constructor(t,r){this.online=t,this.message=r}};const nu={name:"ServerStatus",data(){return{serverStatus:null}},computed:{isUp(){return this.serverStatus&&this.serverStatus.online?{success:!0}:{failure:!0}},serverStatusText(){return this.serverStatus?this.serverStatus.message:""}},async created(){this.serverStatus=await this.$fusekiService.getServerStatus(),this.interval=setInterval(async()=>{this.serverStatus=await this.$fusekiService.getServerStatus()},5e3)},beforeUnmount(){clearInterval(this.interval),this.interval=null}},ru=z("span",null,"server status",-1),iu=["title"],ou={id:"status-icon",class:"ms-2"};function su(n,t,r,o,s,l){return it(),ot("div",null,[ru,z("a",{class:"d-inline-block",href:"#","data-bs-toggle":"tooltip",title:l.serverStatusText},[(it(),ot("svg",ou,[z("circle",{cx:"1em",cy:"1em",r:"1em",stroke:"transparent","stroke-width":"0",fill:"transparent",class:Ia(l.isUp)},null,2)]))],8,iu)])}const au=dn(nu,[["render",su]]),lu="/static/logo-af58c023.svg";Fi.add(Dc,Nc,Lc);const cu={name:"Menu",components:{FontAwesomeIcon:Bi,ServerStatus:au}},uu={class:"navbar navbar-expand-md bg-light"},fu={class:"container-fluid mx-2 mx-md-0"},du=z("img",{alt:"Apache Jena logo",src:lu,style:{width:"52px"}},null,-1),pu=z("button",{class:"navbar-toggler",type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},[z("span",{class:"navbar-toggler-icon"})],-1),hu={class:"collapse navbar-collapse",id:"navbarNav"},mu={class:"navbar-nav"},gu={class:"nav-item"},yu={class:"nav-item"},vu={class:"nav-item"},_u={class:"navbar-nav ms-auto"};function bu(n,t,r,o,s,l){const u=st("router-link"),f=st("FontAwesomeIcon"),d=st("ServerStatus");return it(),ot("nav",uu,[z("div",fu,[pe(u,{to:"/",class:"navbar-brand"},{default:_t(()=>[du,Nt(" Apache Jena Fuseki ")]),_:1}),pu,z("div",hu,[z("ul",mu,[z("li",gu,[pe(u,{to:"/",class:"nav-link","exact-active-class":"active"},{default:_t(()=>[pe(f,{icon:"database"}),Nt(" datasets ")]),_:1})]),z("li",yu,[pe(u,{to:"/manage",class:"nav-link","exact-active-class":"active"},{default:_t(()=>[pe(f,{icon:"cogs"}),Nt(" manage ")]),_:1})]),z("li",vu,[pe(u,{to:"/documentation",class:"nav-link","exact-active-class":"active"},{default:_t(()=>[pe(f,{icon:"info-circle"}),Nt(" help ")]),_:1})])]),z("ul",_u,[pe(d)])])])])}const wu=dn(cu,[["render",bu]]);const Eu={name:"App",components:{Menu:wu}},Au={id:"app"},Su={class:"container-fluid"},Ou={class:"row"};function Cu(n,t,r,o,s,l){const u=st("Menu"),f=st("router-view"),d=st("Toast");return it(),ot("div",Au,[z("div",Su,[z("div",Ou,[pe(u)]),pe(f)]),pe(d)])}const xu=dn(Eu,[["render",Cu]]),Tu="modulepreload",Pu=function(n){return"/"+n},Rs={},ut=function(t,r,o){if(!r||r.length===0)return t();const s=document.getElementsByTagName("link");return Promise.all(r.map(l=>{if(l=Pu(l),l in Rs)return;Rs[l]=!0;const u=l.endsWith(".css"),f=u?'[rel="stylesheet"]':"";if(!!o)for(let h=s.length-1;h>=0;h--){const v=s[h];if(v.href===l&&(!u||v.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${l}"]${f}`))return;const p=document.createElement("link");if(p.rel=u?"stylesheet":Tu,u||(p.as="script",p.crossOrigin=""),p.href=l,document.head.appendChild(p),u)return new Promise((h,v)=>{p.addEventListener("load",h),p.addEventListener("error",()=>v(new Error(`Unable to preload CSS for ${l}`)))})})).then(()=>t())};/*!
  * vue-router v4.1.6
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */const tn=typeof window<"u";function Ru(n){return n.__esModule||n[Symbol.toStringTag]==="Module"}const te=Object.assign;function Xr(n,t){const r={};for(const o in t){const s=t[o];r[o]=Ke(s)?s.map(n):n(s)}return r}const xn=()=>{},Ke=Array.isArray,ku=/\/$/,$u=n=>n.replace(ku,"");function Jr(n,t,r="/"){let o,s={},l="",u="";const f=t.indexOf("#");let d=t.indexOf("?");return f<d&&f>=0&&(d=-1),d>-1&&(o=t.slice(0,d),l=t.slice(d+1,f>-1?f:t.length),s=n(l)),f>-1&&(o=o||t.slice(0,f),u=t.slice(f,t.length)),o=Iu(o??t,r),{fullPath:o+(l&&"?")+l+u,path:o,query:s,hash:u}}function Du(n,t){const r=t.query?n(t.query):"";return t.path+(r&&"?")+r+(t.hash||"")}function ks(n,t){return!t||!n.toLowerCase().startsWith(t.toLowerCase())?n:n.slice(t.length)||"/"}function Nu(n,t,r){const o=t.matched.length-1,s=r.matched.length-1;return o>-1&&o===s&&on(t.matched[o],r.matched[s])&&ja(t.params,r.params)&&n(t.query)===n(r.query)&&t.hash===r.hash}function on(n,t){return(n.aliasOf||n)===(t.aliasOf||t)}function ja(n,t){if(Object.keys(n).length!==Object.keys(t).length)return!1;for(const r in n)if(!Lu(n[r],t[r]))return!1;return!0}function Lu(n,t){return Ke(n)?$s(n,t):Ke(t)?$s(t,n):n===t}function $s(n,t){return Ke(t)?n.length===t.length&&n.every((r,o)=>r===t[o]):n.length===1&&n[0]===t}function Iu(n,t){if(n.startsWith("/"))return n;if(!n)return t;const r=t.split("/"),o=n.split("/");let s=r.length-1,l,u;for(l=0;l<o.length;l++)if(u=o[l],u!==".")if(u==="..")s>1&&s--;else break;return r.slice(0,s).join("/")+"/"+o.slice(l-(l===o.length?1:0)).join("/")}var Nn;(function(n){n.pop="pop",n.push="push"})(Nn||(Nn={}));var Tn;(function(n){n.back="back",n.forward="forward",n.unknown=""})(Tn||(Tn={}));function Mu(n){if(!n)if(tn){const t=document.querySelector("base");n=t&&t.getAttribute("href")||"/",n=n.replace(/^\w+:\/\/[^\/]+/,"")}else n="/";return n[0]!=="/"&&n[0]!=="#"&&(n="/"+n),$u(n)}const Fu=/^[^#]+#/;function Bu(n,t){return n.replace(Fu,"#")+t}function ju(n,t){const r=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{behavior:t.behavior,left:o.left-r.left-(t.left||0),top:o.top-r.top-(t.top||0)}}const gr=()=>({left:window.pageXOffset,top:window.pageYOffset});function Uu(n){let t;if("el"in n){const r=n.el,o=typeof r=="string"&&r.startsWith("#"),s=typeof r=="string"?o?document.getElementById(r.slice(1)):document.querySelector(r):r;if(!s)return;t=ju(s,n)}else t=n;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.pageXOffset,t.top!=null?t.top:window.pageYOffset)}function Ds(n,t){return(history.state?history.state.position-t:-1)+n}const Oi=new Map;function qu(n,t){Oi.set(n,t)}function Hu(n){const t=Oi.get(n);return Oi.delete(n),t}let Wu=()=>location.protocol+"//"+location.host;function Ua(n,t){const{pathname:r,search:o,hash:s}=t,l=n.indexOf("#");if(l>-1){let f=s.includes(n.slice(l))?n.slice(l).length:1,d=s.slice(f);return d[0]!=="/"&&(d="/"+d),ks(d,"")}return ks(r,n)+o+s}function zu(n,t,r,o){let s=[],l=[],u=null;const f=({state:g})=>{const A=Ua(n,location),T=r.value,F=t.value;let I=0;if(g){if(r.value=A,t.value=g,u&&u===T){u=null;return}I=F?g.position-F.position:0}else o(A);s.forEach(O=>{O(r.value,T,{delta:I,type:Nn.pop,direction:I?I>0?Tn.forward:Tn.back:Tn.unknown})})};function d(){u=r.value}function p(g){s.push(g);const A=()=>{const T=s.indexOf(g);T>-1&&s.splice(T,1)};return l.push(A),A}function h(){const{history:g}=window;g.state&&g.replaceState(te({},g.state,{scroll:gr()}),"")}function v(){for(const g of l)g();l=[],window.removeEventListener("popstate",f),window.removeEventListener("beforeunload",h)}return window.addEventListener("popstate",f),window.addEventListener("beforeunload",h),{pauseListeners:d,listen:p,destroy:v}}function Ns(n,t,r,o=!1,s=!1){return{back:n,current:t,forward:r,replaced:o,position:window.history.length,scroll:s?gr():null}}function Vu(n){const{history:t,location:r}=window,o={value:Ua(n,r)},s={value:t.state};s.value||l(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function l(d,p,h){const v=n.indexOf("#"),g=v>-1?(r.host&&document.querySelector("base")?n:n.slice(v))+d:Wu()+n+d;try{t[h?"replaceState":"pushState"](p,"",g),s.value=p}catch(A){console.error(A),r[h?"replace":"assign"](g)}}function u(d,p){const h=te({},t.state,Ns(s.value.back,d,s.value.forward,!0),p,{position:s.value.position});l(d,h,!0),o.value=d}function f(d,p){const h=te({},s.value,t.state,{forward:d,scroll:gr()});l(h.current,h,!0);const v=te({},Ns(o.value,d,null),{position:h.position+1},p);l(d,v,!1),o.value=d}return{location:o,state:s,push:f,replace:u}}function Gu(n){n=Mu(n);const t=Vu(n),r=zu(n,t.state,t.location,t.replace);function o(l,u=!0){u||r.pauseListeners(),history.go(l)}const s=te({location:"",base:n,go:o,createHref:Bu.bind(null,n)},t,r);return Object.defineProperty(s,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(s,"state",{enumerable:!0,get:()=>t.state.value}),s}function Qu(n){return n=location.host?n||location.pathname+location.search:"",n.includes("#")||(n+="#"),Gu(n)}function Ku(n){return typeof n=="string"||n&&typeof n=="object"}function qa(n){return typeof n=="string"||typeof n=="symbol"}const mt={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Ha=Symbol("");var Ls;(function(n){n[n.aborted=4]="aborted",n[n.cancelled=8]="cancelled",n[n.duplicated=16]="duplicated"})(Ls||(Ls={}));function sn(n,t){return te(new Error,{type:n,[Ha]:!0},t)}function ft(n,t){return n instanceof Error&&Ha in n&&(t==null||!!(n.type&t))}const Is="[^/]+?",Xu={sensitive:!1,strict:!1,start:!0,end:!0},Ju=/[.+*?^${}()[\]/\\]/g;function Yu(n,t){const r=te({},Xu,t),o=[];let s=r.start?"^":"";const l=[];for(const p of n){const h=p.length?[]:[90];r.strict&&!p.length&&(s+="/");for(let v=0;v<p.length;v++){const g=p[v];let A=40+(r.sensitive?.25:0);if(g.type===0)v||(s+="/"),s+=g.value.replace(Ju,"\\$&"),A+=40;else if(g.type===1){const{value:T,repeatable:F,optional:I,regexp:O}=g;l.push({name:T,repeatable:F,optional:I});const N=O||Is;if(N!==Is){A+=10;try{new RegExp(`(${N})`)}catch(ae){throw new Error(`Invalid custom RegExp for param "${T}" (${N}): `+ae.message)}}let X=F?`((?:${N})(?:/(?:${N}))*)`:`(${N})`;v||(X=I&&p.length<2?`(?:/${X})`:"/"+X),I&&(X+="?"),s+=X,A+=20,I&&(A+=-8),F&&(A+=-20),N===".*"&&(A+=-50)}h.push(A)}o.push(h)}if(r.strict&&r.end){const p=o.length-1;o[p][o[p].length-1]+=.7000000000000001}r.strict||(s+="/?"),r.end?s+="$":r.strict&&(s+="(?:/|$)");const u=new RegExp(s,r.sensitive?"":"i");function f(p){const h=p.match(u),v={};if(!h)return null;for(let g=1;g<h.length;g++){const A=h[g]||"",T=l[g-1];v[T.name]=A&&T.repeatable?A.split("/"):A}return v}function d(p){let h="",v=!1;for(const g of n){(!v||!h.endsWith("/"))&&(h+="/"),v=!1;for(const A of g)if(A.type===0)h+=A.value;else if(A.type===1){const{value:T,repeatable:F,optional:I}=A,O=T in p?p[T]:"";if(Ke(O)&&!F)throw new Error(`Provided param "${T}" is an array but it is not repeatable (* or + modifiers)`);const N=Ke(O)?O.join("/"):O;if(!N)if(I)g.length<2&&(h.endsWith("/")?h=h.slice(0,-1):v=!0);else throw new Error(`Missing required param "${T}"`);h+=N}}return h||"/"}return{re:u,score:o,keys:l,parse:f,stringify:d}}function Zu(n,t){let r=0;for(;r<n.length&&r<t.length;){const o=t[r]-n[r];if(o)return o;r++}return n.length<t.length?n.length===1&&n[0]===40+40?-1:1:n.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function ef(n,t){let r=0;const o=n.score,s=t.score;for(;r<o.length&&r<s.length;){const l=Zu(o[r],s[r]);if(l)return l;r++}if(Math.abs(s.length-o.length)===1){if(Ms(o))return 1;if(Ms(s))return-1}return s.length-o.length}function Ms(n){const t=n[n.length-1];return n.length>0&&t[t.length-1]<0}const tf={type:0,value:""},nf=/[a-zA-Z0-9_]/;function rf(n){if(!n)return[[]];if(n==="/")return[[tf]];if(!n.startsWith("/"))throw new Error(`Invalid path "${n}"`);function t(A){throw new Error(`ERR (${r})/"${p}": ${A}`)}let r=0,o=r;const s=[];let l;function u(){l&&s.push(l),l=[]}let f=0,d,p="",h="";function v(){p&&(r===0?l.push({type:0,value:p}):r===1||r===2||r===3?(l.length>1&&(d==="*"||d==="+")&&t(`A repeatable param (${p}) must be alone in its segment. eg: '/:ids+.`),l.push({type:1,value:p,regexp:h,repeatable:d==="*"||d==="+",optional:d==="*"||d==="?"})):t("Invalid state to consume buffer"),p="")}function g(){p+=d}for(;f<n.length;){if(d=n[f++],d==="\\"&&r!==2){o=r,r=4;continue}switch(r){case 0:d==="/"?(p&&v(),u()):d===":"?(v(),r=1):g();break;case 4:g(),r=o;break;case 1:d==="("?r=2:nf.test(d)?g():(v(),r=0,d!=="*"&&d!=="?"&&d!=="+"&&f--);break;case 2:d===")"?h[h.length-1]=="\\"?h=h.slice(0,-1)+d:r=3:h+=d;break;case 3:v(),r=0,d!=="*"&&d!=="?"&&d!=="+"&&f--,h="";break;default:t("Unknown state");break}}return r===2&&t(`Unfinished custom RegExp for param "${p}"`),v(),u(),s}function of(n,t,r){const o=Yu(rf(n.path),r),s=te(o,{record:n,parent:t,children:[],alias:[]});return t&&!s.record.aliasOf==!t.record.aliasOf&&t.children.push(s),s}function sf(n,t){const r=[],o=new Map;t=js({strict:!1,end:!0,sensitive:!1},t);function s(h){return o.get(h)}function l(h,v,g){const A=!g,T=af(h);T.aliasOf=g&&g.record;const F=js(t,h),I=[T];if("alias"in h){const X=typeof h.alias=="string"?[h.alias]:h.alias;for(const ae of X)I.push(te({},T,{components:g?g.record.components:T.components,path:ae,aliasOf:g?g.record:T}))}let O,N;for(const X of I){const{path:ae}=X;if(v&&ae[0]!=="/"){const L=v.record.path,de=L[L.length-1]==="/"?"":"/";X.path=v.record.path+(ae&&de+ae)}if(O=of(X,v,F),g?g.alias.push(O):(N=N||O,N!==O&&N.alias.push(O),A&&h.name&&!Bs(O)&&u(h.name)),T.children){const L=T.children;for(let de=0;de<L.length;de++)l(L[de],O,g&&g.children[de])}g=g||O,(O.record.components&&Object.keys(O.record.components).length||O.record.name||O.record.redirect)&&d(O)}return N?()=>{u(N)}:xn}function u(h){if(qa(h)){const v=o.get(h);v&&(o.delete(h),r.splice(r.indexOf(v),1),v.children.forEach(u),v.alias.forEach(u))}else{const v=r.indexOf(h);v>-1&&(r.splice(v,1),h.record.name&&o.delete(h.record.name),h.children.forEach(u),h.alias.forEach(u))}}function f(){return r}function d(h){let v=0;for(;v<r.length&&ef(h,r[v])>=0&&(h.record.path!==r[v].record.path||!Wa(h,r[v]));)v++;r.splice(v,0,h),h.record.name&&!Bs(h)&&o.set(h.record.name,h)}function p(h,v){let g,A={},T,F;if("name"in h&&h.name){if(g=o.get(h.name),!g)throw sn(1,{location:h});F=g.record.name,A=te(Fs(v.params,g.keys.filter(N=>!N.optional).map(N=>N.name)),h.params&&Fs(h.params,g.keys.map(N=>N.name))),T=g.stringify(A)}else if("path"in h)T=h.path,g=r.find(N=>N.re.test(T)),g&&(A=g.parse(T),F=g.record.name);else{if(g=v.name?o.get(v.name):r.find(N=>N.re.test(v.path)),!g)throw sn(1,{location:h,currentLocation:v});F=g.record.name,A=te({},v.params,h.params),T=g.stringify(A)}const I=[];let O=g;for(;O;)I.unshift(O.record),O=O.parent;return{name:F,path:T,params:A,matched:I,meta:cf(I)}}return n.forEach(h=>l(h)),{addRoute:l,resolve:p,removeRoute:u,getRoutes:f,getRecordMatcher:s}}function Fs(n,t){const r={};for(const o of t)o in n&&(r[o]=n[o]);return r}function af(n){return{path:n.path,redirect:n.redirect,name:n.name,meta:n.meta||{},aliasOf:void 0,beforeEnter:n.beforeEnter,props:lf(n),children:n.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in n?n.components||null:n.component&&{default:n.component}}}function lf(n){const t={},r=n.props||!1;if("component"in n)t.default=r;else for(const o in n.components)t[o]=typeof r=="boolean"?r:r[o];return t}function Bs(n){for(;n;){if(n.record.aliasOf)return!0;n=n.parent}return!1}function cf(n){return n.reduce((t,r)=>te(t,r.meta),{})}function js(n,t){const r={};for(const o in n)r[o]=o in t?t[o]:n[o];return r}function Wa(n,t){return t.children.some(r=>r===n||Wa(n,r))}const za=/#/g,uf=/&/g,ff=/\//g,df=/=/g,pf=/\?/g,Va=/\+/g,hf=/%5B/g,mf=/%5D/g,Ga=/%5E/g,gf=/%60/g,Qa=/%7B/g,yf=/%7C/g,Ka=/%7D/g,vf=/%20/g;function ji(n){return encodeURI(""+n).replace(yf,"|").replace(hf,"[").replace(mf,"]")}function _f(n){return ji(n).replace(Qa,"{").replace(Ka,"}").replace(Ga,"^")}function Ci(n){return ji(n).replace(Va,"%2B").replace(vf,"+").replace(za,"%23").replace(uf,"%26").replace(gf,"`").replace(Qa,"{").replace(Ka,"}").replace(Ga,"^")}function bf(n){return Ci(n).replace(df,"%3D")}function wf(n){return ji(n).replace(za,"%23").replace(pf,"%3F")}function Ef(n){return n==null?"":wf(n).replace(ff,"%2F")}function cr(n){try{return decodeURIComponent(""+n)}catch{}return""+n}function Af(n){const t={};if(n===""||n==="?")return t;const o=(n[0]==="?"?n.slice(1):n).split("&");for(let s=0;s<o.length;++s){const l=o[s].replace(Va," "),u=l.indexOf("="),f=cr(u<0?l:l.slice(0,u)),d=u<0?null:cr(l.slice(u+1));if(f in t){let p=t[f];Ke(p)||(p=t[f]=[p]),p.push(d)}else t[f]=d}return t}function Us(n){let t="";for(let r in n){const o=n[r];if(r=bf(r),o==null){o!==void 0&&(t+=(t.length?"&":"")+r);continue}(Ke(o)?o.map(l=>l&&Ci(l)):[o&&Ci(o)]).forEach(l=>{l!==void 0&&(t+=(t.length?"&":"")+r,l!=null&&(t+="="+l))})}return t}function Sf(n){const t={};for(const r in n){const o=n[r];o!==void 0&&(t[r]=Ke(o)?o.map(s=>s==null?null:""+s):o==null?o:""+o)}return t}const Of=Symbol(""),qs=Symbol(""),Ui=Symbol(""),Xa=Symbol(""),xi=Symbol("");function Sn(){let n=[];function t(o){return n.push(o),()=>{const s=n.indexOf(o);s>-1&&n.splice(s,1)}}function r(){n=[]}return{add:t,list:()=>n,reset:r}}function gt(n,t,r,o,s){const l=o&&(o.enterCallbacks[s]=o.enterCallbacks[s]||[]);return()=>new Promise((u,f)=>{const d=v=>{v===!1?f(sn(4,{from:r,to:t})):v instanceof Error?f(v):Ku(v)?f(sn(2,{from:t,to:v})):(l&&o.enterCallbacks[s]===l&&typeof v=="function"&&l.push(v),u())},p=n.call(o&&o.instances[s],t,r,d);let h=Promise.resolve(p);n.length<3&&(h=h.then(d)),h.catch(v=>f(v))})}function Yr(n,t,r,o){const s=[];for(const l of n)for(const u in l.components){let f=l.components[u];if(!(t!=="beforeRouteEnter"&&!l.instances[u]))if(Cf(f)){const p=(f.__vccOpts||f)[t];p&&s.push(gt(p,r,o,l,u))}else{let d=f();s.push(()=>d.then(p=>{if(!p)return Promise.reject(new Error(`Couldn't resolve component "${u}" at "${l.path}"`));const h=Ru(p)?p.default:p;l.components[u]=h;const g=(h.__vccOpts||h)[t];return g&&gt(g,r,o,l,u)()}))}}return s}function Cf(n){return typeof n=="object"||"displayName"in n||"props"in n||"__vccOpts"in n}function Hs(n){const t=$n(Ui),r=$n(Xa),o=Qe(()=>t.resolve(Cn(n.to))),s=Qe(()=>{const{matched:d}=o.value,{length:p}=d,h=d[p-1],v=r.matched;if(!h||!v.length)return-1;const g=v.findIndex(on.bind(null,h));if(g>-1)return g;const A=Ws(d[p-2]);return p>1&&Ws(h)===A&&v[v.length-1].path!==A?v.findIndex(on.bind(null,d[p-2])):g}),l=Qe(()=>s.value>-1&&Rf(r.params,o.value.params)),u=Qe(()=>s.value>-1&&s.value===r.matched.length-1&&ja(r.params,o.value.params));function f(d={}){return Pf(d)?t[Cn(n.replace)?"replace":"push"](Cn(n.to)).catch(xn):Promise.resolve()}return{route:o,href:Qe(()=>o.value.href),isActive:l,isExactActive:u,navigate:f}}const xf=Fa({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Hs,setup(n,{slots:t}){const r=Ma(Hs(n)),{options:o}=$n(Ui),s=Qe(()=>({[zs(n.activeClass,o.linkActiveClass,"router-link-active")]:r.isActive,[zs(n.exactActiveClass,o.linkExactActiveClass,"router-link-exact-active")]:r.isExactActive}));return()=>{const l=t.default&&t.default(r);return n.custom?l:Ba("a",{"aria-current":r.isExactActive?n.ariaCurrentValue:null,href:r.href,onClick:r.navigate,class:s.value},l)}}}),Tf=xf;function Pf(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget&&n.currentTarget.getAttribute){const t=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return n.preventDefault&&n.preventDefault(),!0}}function Rf(n,t){for(const r in t){const o=t[r],s=n[r];if(typeof o=="string"){if(o!==s)return!1}else if(!Ke(s)||s.length!==o.length||o.some((l,u)=>l!==s[u]))return!1}return!0}function Ws(n){return n?n.aliasOf?n.aliasOf.path:n.path:""}const zs=(n,t,r)=>n??t??r,kf=Fa({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(n,{attrs:t,slots:r}){const o=$n(xi),s=Qe(()=>n.route||o.value),l=$n(qs,0),u=Qe(()=>{let p=Cn(l);const{matched:h}=s.value;let v;for(;(v=h[p])&&!v.components;)p++;return p}),f=Qe(()=>s.value.matched[u.value]);Kr(qs,Qe(()=>u.value+1)),Kr(Of,f),Kr(xi,s);const d=Fc();return Bc(()=>[d.value,f.value,n.name],([p,h,v],[g,A,T])=>{h&&(h.instances[v]=p,A&&A!==h&&p&&p===g&&(h.leaveGuards.size||(h.leaveGuards=A.leaveGuards),h.updateGuards.size||(h.updateGuards=A.updateGuards))),p&&h&&(!A||!on(h,A)||!g)&&(h.enterCallbacks[v]||[]).forEach(F=>F(p))},{flush:"post"}),()=>{const p=s.value,h=n.name,v=f.value,g=v&&v.components[h];if(!g)return Vs(r.default,{Component:g,route:p});const A=v.props[h],T=A?A===!0?p.params:typeof A=="function"?A(p):A:null,I=Ba(g,te({},T,t,{onVnodeUnmounted:O=>{O.component.isUnmounted&&(v.instances[h]=null)},ref:d}));return Vs(r.default,{Component:I,route:p})||I}}});function Vs(n,t){if(!n)return null;const r=n(t);return r.length===1?r[0]:r}const $f=kf;function Df(n){const t=sf(n.routes,n),r=n.parseQuery||Af,o=n.stringifyQuery||Us,s=n.history,l=Sn(),u=Sn(),f=Sn(),d=Ic(mt);let p=mt;tn&&n.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const h=Xr.bind(null,w=>""+w),v=Xr.bind(null,Ef),g=Xr.bind(null,cr);function A(w,P){let C,$;return qa(w)?(C=t.getRecordMatcher(w),$=P):$=w,t.addRoute($,C)}function T(w){const P=t.getRecordMatcher(w);P&&t.removeRoute(P)}function F(){return t.getRoutes().map(w=>w.record)}function I(w){return!!t.getRecordMatcher(w)}function O(w,P){if(P=te({},P||d.value),typeof w=="string"){const j=Jr(r,w,P.path),D=t.resolve({path:j.path},P),St=s.createHref(j.fullPath);return te(j,D,{params:g(D.params),hash:cr(j.hash),redirectedFrom:void 0,href:St})}let C;if("path"in w)C=te({},w,{path:Jr(r,w.path,P.path).path});else{const j=te({},w.params);for(const D in j)j[D]==null&&delete j[D];C=te({},w,{params:v(w.params)}),P.params=v(P.params)}const $=t.resolve(C,P),J=w.hash||"";$.params=h(g($.params));const le=Du(o,te({},w,{hash:_f(J),path:$.path})),G=s.createHref(le);return te({fullPath:le,hash:J,query:o===Us?Sf(w.query):w.query||{}},$,{redirectedFrom:void 0,href:G})}function N(w){return typeof w=="string"?Jr(r,w,d.value.path):te({},w)}function X(w,P){if(p!==w)return sn(8,{from:P,to:w})}function ae(w){return ye(w)}function L(w){return ae(te(N(w),{replace:!0}))}function de(w){const P=w.matched[w.matched.length-1];if(P&&P.redirect){const{redirect:C}=P;let $=typeof C=="function"?C(w):C;return typeof $=="string"&&($=$.includes("?")||$.includes("#")?$=N($):{path:$},$.params={}),te({query:w.query,hash:w.hash,params:"path"in $?{}:w.params},$)}}function ye(w,P){const C=p=O(w),$=d.value,J=w.state,le=w.force,G=w.replace===!0,j=de(C);if(j)return ye(te(N(j),{state:typeof j=="object"?te({},J,j.state):J,force:le,replace:G}),P||C);const D=C;D.redirectedFrom=P;let St;return!le&&Nu(o,$,C)&&(St=sn(16,{to:D,from:$}),E($,$,!0,!1)),(St?Promise.resolve(St):ve(D,$)).catch(Oe=>ft(Oe)?ft(Oe,2)?Oe:Xe(Oe):at(Oe,D,$)).then(Oe=>{if(Oe){if(ft(Oe,2))return ye(te({replace:G},N(Oe.to),{state:typeof Oe.to=="object"?te({},J,Oe.to.state):J,force:le}),P||D)}else Oe=Se(D,$,!0,G,J);return Te(D,$,Oe),Oe})}function xe(w,P){const C=X(w,P);return C?Promise.reject(C):Promise.resolve()}function ve(w,P){let C;const[$,J,le]=Nf(w,P);C=Yr($.reverse(),"beforeRouteLeave",w,P);for(const j of $)j.leaveGuards.forEach(D=>{C.push(gt(D,w,P))});const G=xe.bind(null,w,P);return C.push(G),Jt(C).then(()=>{C=[];for(const j of l.list())C.push(gt(j,w,P));return C.push(G),Jt(C)}).then(()=>{C=Yr(J,"beforeRouteUpdate",w,P);for(const j of J)j.updateGuards.forEach(D=>{C.push(gt(D,w,P))});return C.push(G),Jt(C)}).then(()=>{C=[];for(const j of w.matched)if(j.beforeEnter&&!P.matched.includes(j))if(Ke(j.beforeEnter))for(const D of j.beforeEnter)C.push(gt(D,w,P));else C.push(gt(j.beforeEnter,w,P));return C.push(G),Jt(C)}).then(()=>(w.matched.forEach(j=>j.enterCallbacks={}),C=Yr(le,"beforeRouteEnter",w,P),C.push(G),Jt(C))).then(()=>{C=[];for(const j of u.list())C.push(gt(j,w,P));return C.push(G),Jt(C)}).catch(j=>ft(j,8)?j:Promise.reject(j))}function Te(w,P,C){for(const $ of f.list())$(w,P,C)}function Se(w,P,C,$,J){const le=X(w,P);if(le)return le;const G=P===mt,j=tn?history.state:{};C&&($||G?s.replace(w.fullPath,te({scroll:G&&j&&j.scroll},J)):s.push(w.fullPath,J)),d.value=w,E(w,P,C,G),Xe()}let ie;function ue(){ie||(ie=s.listen((w,P,C)=>{if(!mn.listening)return;const $=O(w),J=de($);if(J){ye(te(J,{replace:!0}),$).catch(xn);return}p=$;const le=d.value;tn&&qu(Ds(le.fullPath,C.delta),gr()),ve($,le).catch(G=>ft(G,12)?G:ft(G,2)?(ye(G.to,$).then(j=>{ft(j,20)&&!C.delta&&C.type===Nn.pop&&s.go(-1,!1)}).catch(xn),Promise.reject()):(C.delta&&s.go(-C.delta,!1),at(G,$,le))).then(G=>{G=G||Se($,le,!1),G&&(C.delta&&!ft(G,8)?s.go(-C.delta,!1):C.type===Nn.pop&&ft(G,20)&&s.go(-1,!1)),Te($,le,G)}).catch(xn)}))}let ce=Sn(),_e=Sn(),be;function at(w,P,C){Xe(w);const $=_e.list();return $.length?$.forEach(J=>J(w,P,C)):console.error(w),Promise.reject(w)}function Ft(){return be&&d.value!==mt?Promise.resolve():new Promise((w,P)=>{ce.add([w,P])})}function Xe(w){return be||(be=!w,ue(),ce.list().forEach(([P,C])=>w?C(w):P()),ce.reset()),w}function E(w,P,C,$){const{scrollBehavior:J}=n;if(!tn||!J)return Promise.resolve();const le=!C&&Hu(Ds(w.fullPath,0))||($||!C)&&history.state&&history.state.scroll||null;return Mc().then(()=>J(w,P,le)).then(G=>G&&Uu(G)).catch(G=>at(G,w,P))}const Et=w=>s.go(w);let je;const At=new Set,mn={currentRoute:d,listening:!0,addRoute:A,removeRoute:T,hasRoute:I,getRoutes:F,resolve:O,options:n,push:ae,replace:L,go:Et,back:()=>Et(-1),forward:()=>Et(1),beforeEach:l.add,beforeResolve:u.add,afterEach:f.add,onError:_e.add,isReady:Ft,install(w){const P=this;w.component("RouterLink",Tf),w.component("RouterView",$f),w.config.globalProperties.$router=P,Object.defineProperty(w.config.globalProperties,"$route",{enumerable:!0,get:()=>Cn(d)}),tn&&!je&&d.value===mt&&(je=!0,ae(s.location).catch(J=>{}));const C={};for(const J in mt)C[J]=Qe(()=>d.value[J]);w.provide(Ui,P),w.provide(Xa,Ma(C)),w.provide(xi,d);const $=w.unmount;At.add(w),w.unmount=function(){At.delete(w),At.size<1&&(p=mt,ie&&ie(),ie=null,d.value=mt,je=!1,be=!1),$()}}};return mn}function Jt(n){return n.reduce((t,r)=>t.then(()=>r()),Promise.resolve())}function Nf(n,t){const r=[],o=[],s=[],l=Math.max(t.matched.length,n.matched.length);for(let u=0;u<l;u++){const f=t.matched[u];f&&(n.matched.find(p=>on(p,f))?o.push(f):r.push(f));const d=n.matched[u];d&&(t.matched.find(p=>on(p,d))||s.push(d))}return[r,o,s]}Fi.add(jc,Uc,qc,Hc);const Lf={name:"Home",mixins:[Wc],...zc,components:{"table-listing":Vc,FontAwesomeIcon:Bi},beforeRouteEnter(n,t,r){r(async o=>{await o.initializeData(),Dn.on("connection:reset",o.initializeData)})},async beforeRouteUpdate(n,t,r){this.initializeData(),r()},beforeRouteLeave(n,t,r){this.serverData=null,Dn.off("connection:reset"),r()},computed:{headerString(){return this.serverData?`Version ${this.serverData.version}. Uptime ${this.convertUptime(this.serverData.uptime)}`:""}},methods:{convertUptime(n){const t=n%60,r=Math.floor(n/60%60),o=Math.floor(n/(60*60)%24),s=Math.floor(n/(60*60*24));return`${s>0?s+"d":""} ${o>0?o+"h":""} ${r}m ${t<9?"0"+t:t}s`}}},If={class:"container-fluid"},Mf={class:"row mt-4"},Ff={class:"col-12"},Bf=z("h2",{class:"text-center"}," Apache Jena Fuseki ",-1),jf={class:"text-center"},Uf={class:"badge text-bg-secondary"},qf=["onClick"],Hf=z("span",{class:"ms-1"},"query",-1),Wf=["onClick"],zf=z("span",{class:"ms-1"},"add data",-1),Vf=["onClick"],Gf=z("span",{class:"ms-1"},"edit",-1),Qf=["onClick"],Kf=z("span",{class:"ms-1"},"info",-1);function Xf(n,t,r,o,s,l){const u=st("router-link"),f=st("FontAwesomeIcon"),d=st("table-listing");return it(),ot("div",If,[z("div",Mf,[z("div",Ff,[Bf,z("div",jf,[z("span",Uf,Si(l.headerString),1)])])]),pe(d,{fields:n.fields,items:n.items,"is-busy":n.isBusy},{empty:_t(()=>[z("h4",null,[Nt(" No datasets created - "),pe(u,{to:"/manage/new"},{default:_t(()=>[Nt(" add one ")]),_:1})])]),"cell(actions)":_t(p=>[z("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/query`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[pe(f,{icon:"question-circle"}),Hf],8,qf),z("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/upload`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[pe(f,{icon:"upload"}),zf],8,Wf),z("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/edit`),type:"button",class:"btn btn-primary me-0 me-md-2 mb-2 mb-md-0 d-block d-md-inline-block"},[pe(f,{icon:"edit"}),Gf],8,Vf),z("button",{onClick:h=>n.$router.push(`/dataset${p.item.name}/info`),type:"button",class:"btn btn-primary me-0 mb-md-0 d-block d-md-inline-block"},[pe(f,{icon:"tachometer-alt"}),Kf],8,Qf)]),_:1},8,["fields","items","is-busy"])])}const Jf=dn(Lf,[["render",Xf]]);Fi.add(Gc);const Yf={name:"NotFound",components:{FontAwesomeIcon:Bi}},Zf={class:"container-fluid"},ed={class:"row mt-2"},td={class:"col-12"},nd={class:"jumbotron"},rd=z("h1",{class:"display-4"}," 404 Page Not Found ",-1),id={class:"lead"};function od(n,t,r,o,s,l){const u=st("FontAwesomeIcon");return it(),ot("div",Zf,[z("div",ed,[z("div",td,[z("div",nd,[rd,z("p",id,[z("button",{type:"button",class:"btn btn-primary",onClick:t[0]||(t[0]=f=>n.$router.push("/"))},[pe(u,{icon:"arrow-left"}),Nt(" Back to Home ")])])])])])])}const sd=dn(Yf,[["render",od]]),ad=[{path:"/",name:"Home",component:Jf},{path:"/dataset/:datasetName/query",name:"DatasetQuery",component:()=>ut(()=>import("./queryDataset-42923bbf.js").then(n=>n.ab),["static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css"]),props:!0},{path:"/dataset/:datasetName/query*",name:"DatasetQueryParameters",component:()=>ut(()=>import("./queryDataset-42923bbf.js").then(n=>n.ab),["static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css"]),props:!0},{path:"/dataset/:datasetName/upload",name:"DatasetUpload",component:()=>ut(()=>import("./manageDataset-fd091f6f.js").then(n=>n.U),["static/manageDataset-fd091f6f.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/dataset/:datasetName/edit",name:"DatasetEdit",component:()=>ut(()=>import("./manageDataset-fd091f6f.js").then(n=>n.E),["static/manageDataset-fd091f6f.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/dataset/:datasetName/info",name:"DatasetInfo",component:()=>ut(()=>import("./manageDataset-fd091f6f.js").then(n=>n.I),["static/manageDataset-fd091f6f.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css","static/manageDataset-5d0f417c.css"]),props:!0},{path:"/manage",name:"ManageDatasets",component:()=>ut(()=>import("./queryDataset-42923bbf.js").then(n=>n.ac),["static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css"])},{path:"/manage/new",name:"NewDataset",component:()=>ut(()=>import("./manageDataset-fd091f6f.js").then(n=>n.N),["static/manageDataset-fd091f6f.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css","static/manageDataset-5d0f417c.css"])},{path:"/manage/tasks",name:"Tasks",component:()=>ut(()=>import("./other-b38027a0.js").then(n=>n.T),["static/other-b38027a0.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css"])},{path:"/documentation",name:"Help",component:()=>ut(()=>import("./other-b38027a0.js").then(n=>n.H),["static/other-b38027a0.js","static/queryDataset-42923bbf.js","static/queryDataset-d73acde8.css"])},{path:"/:pathMatch(.*)*",name:"Not Found",component:sd}],ld=Df({routes:ad,history:Qu()});var Gs={},cd={get exports(){return Gs},set exports(n){Gs=n}};/*!
  * Bootstrap v5.2.3 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */(function(n,t){(function(r,o){n.exports=o()})(Qc,function(){const r="transitionend",o=a=>{let e=a.getAttribute("data-bs-target");if(!e||e==="#"){let i=a.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&i!=="#"?i.trim():null}return e},s=a=>{const e=o(a);return e&&document.querySelector(e)?e:null},l=a=>{const e=o(a);return e?document.querySelector(e):null},u=a=>{a.dispatchEvent(new Event(r))},f=a=>!(!a||typeof a!="object")&&(a.jquery!==void 0&&(a=a[0]),a.nodeType!==void 0),d=a=>f(a)?a.jquery?a[0]:a:typeof a=="string"&&a.length>0?document.querySelector(a):null,p=a=>{if(!f(a)||a.getClientRects().length===0)return!1;const e=getComputedStyle(a).getPropertyValue("visibility")==="visible",i=a.closest("details:not([open])");if(!i)return e;if(i!==a){const c=a.closest("summary");if(c&&c.parentNode!==i||c===null)return!1}return e},h=a=>!a||a.nodeType!==Node.ELEMENT_NODE||!!a.classList.contains("disabled")||(a.disabled!==void 0?a.disabled:a.hasAttribute("disabled")&&a.getAttribute("disabled")!=="false"),v=a=>{if(!document.documentElement.attachShadow)return null;if(typeof a.getRootNode=="function"){const e=a.getRootNode();return e instanceof ShadowRoot?e:null}return a instanceof ShadowRoot?a:a.parentNode?v(a.parentNode):null},g=()=>{},A=a=>{a.offsetHeight},T=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,F=[],I=()=>document.documentElement.dir==="rtl",O=a=>{var e;e=()=>{const i=T();if(i){const c=a.NAME,m=i.fn[c];i.fn[c]=a.jQueryInterface,i.fn[c].Constructor=a,i.fn[c].noConflict=()=>(i.fn[c]=m,a.jQueryInterface)}},document.readyState==="loading"?(F.length||document.addEventListener("DOMContentLoaded",()=>{for(const i of F)i()}),F.push(e)):e()},N=a=>{typeof a=="function"&&a()},X=(a,e,i=!0)=>{if(!i)return void N(a);const c=(_=>{if(!_)return 0;let{transitionDuration:b,transitionDelay:S}=window.getComputedStyle(_);const R=Number.parseFloat(b),k=Number.parseFloat(S);return R||k?(b=b.split(",")[0],S=S.split(",")[0],1e3*(Number.parseFloat(b)+Number.parseFloat(S))):0})(e)+5;let m=!1;const y=({target:_})=>{_===e&&(m=!0,e.removeEventListener(r,y),N(a))};e.addEventListener(r,y),setTimeout(()=>{m||u(e)},c)},ae=(a,e,i,c)=>{const m=a.length;let y=a.indexOf(e);return y===-1?!i&&c?a[m-1]:a[0]:(y+=i?1:-1,c&&(y=(y+m)%m),a[Math.max(0,Math.min(y,m-1))])},L=/[^.]*(?=\..*)\.|.*/,de=/\..*/,ye=/::\d+$/,xe={};let ve=1;const Te={mouseenter:"mouseover",mouseleave:"mouseout"},Se=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ie(a,e){return e&&`${e}::${ve++}`||a.uidEvent||ve++}function ue(a){const e=ie(a);return a.uidEvent=e,xe[e]=xe[e]||{},xe[e]}function ce(a,e,i=null){return Object.values(a).find(c=>c.callable===e&&c.delegationSelector===i)}function _e(a,e,i){const c=typeof e=="string",m=c?i:e||i;let y=Xe(a);return Se.has(y)||(y=a),[c,m,y]}function be(a,e,i,c,m){if(typeof e!="string"||!a)return;let[y,_,b]=_e(e,i,c);e in Te&&(_=(U=>function(B){if(!B.relatedTarget||B.relatedTarget!==B.delegateTarget&&!B.delegateTarget.contains(B.relatedTarget))return U.call(this,B)})(_));const S=ue(a),R=S[b]||(S[b]={}),k=ce(R,_,y?i:null);if(k)return void(k.oneOff=k.oneOff&&m);const x=ie(_,e.replace(L,"")),H=y?function(M,U,B){return function q(ne){const se=M.querySelectorAll(U);for(let{target:V}=ne;V&&V!==this;V=V.parentNode)for(const Y of se)if(Y===V)return Et(ne,{delegateTarget:V}),q.oneOff&&E.off(M,ne.type,U,B),B.apply(V,[ne])}}(a,i,_):function(M,U){return function B(q){return Et(q,{delegateTarget:M}),B.oneOff&&E.off(M,q.type,U),U.apply(M,[q])}}(a,_);H.delegationSelector=y?i:null,H.callable=_,H.oneOff=m,H.uidEvent=x,R[x]=H,a.addEventListener(b,H,y)}function at(a,e,i,c,m){const y=ce(e[i],c,m);y&&(a.removeEventListener(i,y,Boolean(m)),delete e[i][y.uidEvent])}function Ft(a,e,i,c){const m=e[i]||{};for(const y of Object.keys(m))if(y.includes(c)){const _=m[y];at(a,e,i,_.callable,_.delegationSelector)}}function Xe(a){return a=a.replace(de,""),Te[a]||a}const E={on(a,e,i,c){be(a,e,i,c,!1)},one(a,e,i,c){be(a,e,i,c,!0)},off(a,e,i,c){if(typeof e!="string"||!a)return;const[m,y,_]=_e(e,i,c),b=_!==e,S=ue(a),R=S[_]||{},k=e.startsWith(".");if(y===void 0){if(k)for(const x of Object.keys(S))Ft(a,S,x,e.slice(1));for(const x of Object.keys(R)){const H=x.replace(ye,"");if(!b||e.includes(H)){const M=R[x];at(a,S,_,M.callable,M.delegationSelector)}}}else{if(!Object.keys(R).length)return;at(a,S,_,y,m?i:null)}},trigger(a,e,i){if(typeof e!="string"||!a)return null;const c=T();let m=null,y=!0,_=!0,b=!1;e!==Xe(e)&&c&&(m=c.Event(e,i),c(a).trigger(m),y=!m.isPropagationStopped(),_=!m.isImmediatePropagationStopped(),b=m.isDefaultPrevented());let S=new Event(e,{bubbles:y,cancelable:!0});return S=Et(S,i),b&&S.preventDefault(),_&&a.dispatchEvent(S),S.defaultPrevented&&m&&m.preventDefault(),S}};function Et(a,e){for(const[i,c]of Object.entries(e||{}))try{a[i]=c}catch{Object.defineProperty(a,i,{configurable:!0,get:()=>c})}return a}const je=new Map,At={set(a,e,i){je.has(a)||je.set(a,new Map);const c=je.get(a);c.has(e)||c.size===0?c.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(c.keys())[0]}.`)},get:(a,e)=>je.has(a)&&je.get(a).get(e)||null,remove(a,e){if(!je.has(a))return;const i=je.get(a);i.delete(e),i.size===0&&je.delete(a)}};function mn(a){if(a==="true")return!0;if(a==="false")return!1;if(a===Number(a).toString())return Number(a);if(a===""||a==="null")return null;if(typeof a!="string")return a;try{return JSON.parse(decodeURIComponent(a))}catch{return a}}function w(a){return a.replace(/[A-Z]/g,e=>`-${e.toLowerCase()}`)}const P={setDataAttribute(a,e,i){a.setAttribute(`data-bs-${w(e)}`,i)},removeDataAttribute(a,e){a.removeAttribute(`data-bs-${w(e)}`)},getDataAttributes(a){if(!a)return{};const e={},i=Object.keys(a.dataset).filter(c=>c.startsWith("bs")&&!c.startsWith("bsConfig"));for(const c of i){let m=c.replace(/^bs/,"");m=m.charAt(0).toLowerCase()+m.slice(1,m.length),e[m]=mn(a.dataset[c])}return e},getDataAttribute:(a,e)=>mn(a.getAttribute(`data-bs-${w(e)}`))};class C{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,i){const c=f(i)?P.getDataAttribute(i,"config"):{};return{...this.constructor.Default,...typeof c=="object"?c:{},...f(i)?P.getDataAttributes(i):{},...typeof e=="object"?e:{}}}_typeCheckConfig(e,i=this.constructor.DefaultType){for(const m of Object.keys(i)){const y=i[m],_=e[m],b=f(_)?"element":(c=_)==null?`${c}`:Object.prototype.toString.call(c).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(y).test(b))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${m}" provided type "${b}" but expected type "${y}".`)}var c}}class $ extends C{constructor(e,i){super(),(e=d(e))&&(this._element=e,this._config=this._getConfig(i),At.set(this._element,this.constructor.DATA_KEY,this))}dispose(){At.remove(this._element,this.constructor.DATA_KEY),E.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,i,c=!0){X(e,i,c)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return At.get(d(e),this.DATA_KEY)}static getOrCreateInstance(e,i={}){return this.getInstance(e)||new this(e,typeof i=="object"?i:null)}static get VERSION(){return"5.2.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const J=(a,e="hide")=>{const i=`click.dismiss${a.EVENT_KEY}`,c=a.NAME;E.on(document,i,`[data-bs-dismiss="${c}"]`,function(m){if(["A","AREA"].includes(this.tagName)&&m.preventDefault(),h(this))return;const y=l(this)||this.closest(`.${c}`);a.getOrCreateInstance(y)[e]()})};class le extends ${static get NAME(){return"alert"}close(){if(E.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback(()=>this._destroyElement(),this._element,e)}_destroyElement(){this._element.remove(),E.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each(function(){const i=le.getOrCreateInstance(this);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e](this)}})}}J(le,"close"),O(le);const G='[data-bs-toggle="button"]';class j extends ${static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each(function(){const i=j.getOrCreateInstance(this);e==="toggle"&&i[e]()})}}E.on(document,"click.bs.button.data-api",G,a=>{a.preventDefault();const e=a.target.closest(G);j.getOrCreateInstance(e).toggle()}),O(j);const D={find:(a,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,a)),findOne:(a,e=document.documentElement)=>Element.prototype.querySelector.call(e,a),children:(a,e)=>[].concat(...a.children).filter(i=>i.matches(e)),parents(a,e){const i=[];let c=a.parentNode.closest(e);for(;c;)i.push(c),c=c.parentNode.closest(e);return i},prev(a,e){let i=a.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(a,e){let i=a.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(a){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(i=>`${i}:not([tabindex^="-"])`).join(",");return this.find(e,a).filter(i=>!h(i)&&p(i))}},St={endCallback:null,leftCallback:null,rightCallback:null},Oe={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class In extends C{constructor(e,i){super(),this._element=e,e&&In.isSupported()&&(this._config=this._getConfig(i),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return St}static get DefaultType(){return Oe}static get NAME(){return"swipe"}dispose(){E.off(this._element,".bs.swipe")}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),N(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const i=e/this._deltaX;this._deltaX=0,i&&N(i>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(E.on(this._element,"pointerdown.bs.swipe",e=>this._start(e)),E.on(this._element,"pointerup.bs.swipe",e=>this._end(e)),this._element.classList.add("pointer-event")):(E.on(this._element,"touchstart.bs.swipe",e=>this._start(e)),E.on(this._element,"touchmove.bs.swipe",e=>this._move(e)),E.on(this._element,"touchend.bs.swipe",e=>this._end(e)))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&(e.pointerType==="pen"||e.pointerType==="touch")}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const gn="next",Bt="prev",jt="left",Mn="right",Er="slid.bs.carousel",ro="carousel",Fn="active",xl={ArrowLeft:Mn,ArrowRight:jt},Tl={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Pl={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Ut extends ${constructor(e,i){super(e,i),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=D.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===ro&&this.cycle()}static get Default(){return Tl}static get DefaultType(){return Pl}static get NAME(){return"carousel"}next(){this._slide(gn)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._slide(Bt)}pause(){this._isSliding&&u(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval(()=>this.nextWhenVisible(),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?E.one(this._element,Er,()=>this.cycle()):this.cycle())}to(e){const i=this._getItems();if(e>i.length-1||e<0)return;if(this._isSliding)return void E.one(this._element,Er,()=>this.to(e));const c=this._getItemIndex(this._getActive());if(c===e)return;const m=e>c?gn:Bt;this._slide(m,i[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&E.on(this._element,"keydown.bs.carousel",e=>this._keydown(e)),this._config.pause==="hover"&&(E.on(this._element,"mouseenter.bs.carousel",()=>this.pause()),E.on(this._element,"mouseleave.bs.carousel",()=>this._maybeEnableCycle())),this._config.touch&&In.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const i of D.find(".carousel-item img",this._element))E.on(i,"dragstart.bs.carousel",c=>c.preventDefault());const e={leftCallback:()=>this._slide(this._directionToOrder(jt)),rightCallback:()=>this._slide(this._directionToOrder(Mn)),endCallback:()=>{this._config.pause==="hover"&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(()=>this._maybeEnableCycle(),500+this._config.interval))}};this._swipeHelper=new In(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const i=xl[e.key];i&&(e.preventDefault(),this._slide(this._directionToOrder(i)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const i=D.findOne(".active",this._indicatorsElement);i.classList.remove(Fn),i.removeAttribute("aria-current");const c=D.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);c&&(c.classList.add(Fn),c.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const i=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=i||this._config.defaultInterval}_slide(e,i=null){if(this._isSliding)return;const c=this._getActive(),m=e===gn,y=i||ae(this._getItems(),c,m,this._config.wrap);if(y===c)return;const _=this._getItemIndex(y),b=x=>E.trigger(this._element,x,{relatedTarget:y,direction:this._orderToDirection(e),from:this._getItemIndex(c),to:_});if(b("slide.bs.carousel").defaultPrevented||!c||!y)return;const S=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(_),this._activeElement=y;const R=m?"carousel-item-start":"carousel-item-end",k=m?"carousel-item-next":"carousel-item-prev";y.classList.add(k),A(y),c.classList.add(R),y.classList.add(R),this._queueCallback(()=>{y.classList.remove(R,k),y.classList.add(Fn),c.classList.remove(Fn,k,R),this._isSliding=!1,b(Er)},c,this._isAnimated()),S&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return D.findOne(".active.carousel-item",this._element)}_getItems(){return D.find(".carousel-item",this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return I()?e===jt?Bt:gn:e===jt?gn:Bt}_orderToDirection(e){return I()?e===Bt?jt:Mn:e===Bt?Mn:jt}static jQueryInterface(e){return this.each(function(){const i=Ut.getOrCreateInstance(this,e);if(typeof e!="number"){if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}}else i.to(e)})}}E.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",function(a){const e=l(this);if(!e||!e.classList.contains(ro))return;a.preventDefault();const i=Ut.getOrCreateInstance(e),c=this.getAttribute("data-bs-slide-to");return c?(i.to(c),void i._maybeEnableCycle()):P.getDataAttribute(this,"slide")==="next"?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())}),E.on(window,"load.bs.carousel.data-api",()=>{const a=D.find('[data-bs-ride="carousel"]');for(const e of a)Ut.getOrCreateInstance(e)}),O(Ut);const Ar="show",Bn="collapse",jn="collapsing",Sr='[data-bs-toggle="collapse"]',Rl={parent:null,toggle:!0},kl={parent:"(null|element)",toggle:"boolean"};class qt extends ${constructor(e,i){super(e,i),this._isTransitioning=!1,this._triggerArray=[];const c=D.find(Sr);for(const m of c){const y=s(m),_=D.find(y).filter(b=>b===this._element);y!==null&&_.length&&this._triggerArray.push(m)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Rl}static get DefaultType(){return kl}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(m=>m!==this._element).map(m=>qt.getOrCreateInstance(m,{toggle:!1}))),e.length&&e[0]._isTransitioning||E.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const m of e)m.hide();const i=this._getDimension();this._element.classList.remove(Bn),this._element.classList.add(jn),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const c=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(jn),this._element.classList.add(Bn,Ar),this._element.style[i]="",E.trigger(this._element,"shown.bs.collapse")},this._element,!0),this._element.style[i]=`${this._element[c]}px`}hide(){if(this._isTransitioning||!this._isShown()||E.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,A(this._element),this._element.classList.add(jn),this._element.classList.remove(Bn,Ar);for(const i of this._triggerArray){const c=l(i);c&&!this._isShown(c)&&this._addAriaAndCollapsedClass([i],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(jn),this._element.classList.add(Bn),E.trigger(this._element,"hidden.bs.collapse")},this._element,!0)}_isShown(e=this._element){return e.classList.contains(Ar)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=d(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Sr);for(const i of e){const c=l(i);c&&this._addAriaAndCollapsedClass([i],this._isShown(c))}}_getFirstLevelChildren(e){const i=D.find(":scope .collapse .collapse",this._config.parent);return D.find(e,this._config.parent).filter(c=>!i.includes(c))}_addAriaAndCollapsedClass(e,i){if(e.length)for(const c of e)c.classList.toggle("collapsed",!i),c.setAttribute("aria-expanded",i)}static jQueryInterface(e){const i={};return typeof e=="string"&&/show|hide/.test(e)&&(i.toggle=!1),this.each(function(){const c=qt.getOrCreateInstance(this,i);if(typeof e=="string"){if(c[e]===void 0)throw new TypeError(`No method named "${e}"`);c[e]()}})}}E.on(document,"click.bs.collapse.data-api",Sr,function(a){(a.target.tagName==="A"||a.delegateTarget&&a.delegateTarget.tagName==="A")&&a.preventDefault();const e=s(this),i=D.find(e);for(const c of i)qt.getOrCreateInstance(c,{toggle:!1}).toggle()}),O(qt);var Pe="top",Le="bottom",Ie="right",Re="left",Un="auto",Ht=[Pe,Le,Ie,Re],Ot="start",Wt="end",io="clippingParents",Or="viewport",zt="popper",oo="reference",Cr=Ht.reduce(function(a,e){return a.concat([e+"-"+Ot,e+"-"+Wt])},[]),xr=[].concat(Ht,[Un]).reduce(function(a,e){return a.concat([e,e+"-"+Ot,e+"-"+Wt])},[]),so="beforeRead",ao="read",lo="afterRead",co="beforeMain",uo="main",fo="afterMain",po="beforeWrite",ho="write",mo="afterWrite",go=[so,ao,lo,co,uo,fo,po,ho,mo];function Je(a){return a?(a.nodeName||"").toLowerCase():null}function Ue(a){if(a==null)return window;if(a.toString()!=="[object Window]"){var e=a.ownerDocument;return e&&e.defaultView||window}return a}function Ct(a){return a instanceof Ue(a).Element||a instanceof Element}function qe(a){return a instanceof Ue(a).HTMLElement||a instanceof HTMLElement}function Tr(a){return typeof ShadowRoot<"u"&&(a instanceof Ue(a).ShadowRoot||a instanceof ShadowRoot)}const Pr={name:"applyStyles",enabled:!0,phase:"write",fn:function(a){var e=a.state;Object.keys(e.elements).forEach(function(i){var c=e.styles[i]||{},m=e.attributes[i]||{},y=e.elements[i];qe(y)&&Je(y)&&(Object.assign(y.style,c),Object.keys(m).forEach(function(_){var b=m[_];b===!1?y.removeAttribute(_):y.setAttribute(_,b===!0?"":b)}))})},effect:function(a){var e=a.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach(function(c){var m=e.elements[c],y=e.attributes[c]||{},_=Object.keys(e.styles.hasOwnProperty(c)?e.styles[c]:i[c]).reduce(function(b,S){return b[S]="",b},{});qe(m)&&Je(m)&&(Object.assign(m.style,_),Object.keys(y).forEach(function(b){m.removeAttribute(b)}))})}},requires:["computeStyles"]};function Ye(a){return a.split("-")[0]}var xt=Math.max,qn=Math.min,Vt=Math.round;function Rr(){var a=navigator.userAgentData;return a!=null&&a.brands?a.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function yo(){return!/^((?!chrome|android).)*safari/i.test(Rr())}function Gt(a,e,i){e===void 0&&(e=!1),i===void 0&&(i=!1);var c=a.getBoundingClientRect(),m=1,y=1;e&&qe(a)&&(m=a.offsetWidth>0&&Vt(c.width)/a.offsetWidth||1,y=a.offsetHeight>0&&Vt(c.height)/a.offsetHeight||1);var _=(Ct(a)?Ue(a):window).visualViewport,b=!yo()&&i,S=(c.left+(b&&_?_.offsetLeft:0))/m,R=(c.top+(b&&_?_.offsetTop:0))/y,k=c.width/m,x=c.height/y;return{width:k,height:x,top:R,right:S+k,bottom:R+x,left:S,x:S,y:R}}function kr(a){var e=Gt(a),i=a.offsetWidth,c=a.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-c)<=1&&(c=e.height),{x:a.offsetLeft,y:a.offsetTop,width:i,height:c}}function vo(a,e){var i=e.getRootNode&&e.getRootNode();if(a.contains(e))return!0;if(i&&Tr(i)){var c=e;do{if(c&&a.isSameNode(c))return!0;c=c.parentNode||c.host}while(c)}return!1}function lt(a){return Ue(a).getComputedStyle(a)}function $l(a){return["table","td","th"].indexOf(Je(a))>=0}function pt(a){return((Ct(a)?a.ownerDocument:a.document)||window.document).documentElement}function Hn(a){return Je(a)==="html"?a:a.assignedSlot||a.parentNode||(Tr(a)?a.host:null)||pt(a)}function _o(a){return qe(a)&&lt(a).position!=="fixed"?a.offsetParent:null}function yn(a){for(var e=Ue(a),i=_o(a);i&&$l(i)&&lt(i).position==="static";)i=_o(i);return i&&(Je(i)==="html"||Je(i)==="body"&&lt(i).position==="static")?e:i||function(c){var m=/firefox/i.test(Rr());if(/Trident/i.test(Rr())&&qe(c)&&lt(c).position==="fixed")return null;var y=Hn(c);for(Tr(y)&&(y=y.host);qe(y)&&["html","body"].indexOf(Je(y))<0;){var _=lt(y);if(_.transform!=="none"||_.perspective!=="none"||_.contain==="paint"||["transform","perspective"].indexOf(_.willChange)!==-1||m&&_.willChange==="filter"||m&&_.filter&&_.filter!=="none")return y;y=y.parentNode}return null}(a)||e}function $r(a){return["top","bottom"].indexOf(a)>=0?"x":"y"}function vn(a,e,i){return xt(a,qn(e,i))}function bo(a){return Object.assign({},{top:0,right:0,bottom:0,left:0},a)}function wo(a,e){return e.reduce(function(i,c){return i[c]=a,i},{})}const Eo={name:"arrow",enabled:!0,phase:"main",fn:function(a){var e,i=a.state,c=a.name,m=a.options,y=i.elements.arrow,_=i.modifiersData.popperOffsets,b=Ye(i.placement),S=$r(b),R=[Re,Ie].indexOf(b)>=0?"height":"width";if(y&&_){var k=function(re,ee){return bo(typeof(re=typeof re=="function"?re(Object.assign({},ee.rects,{placement:ee.placement})):re)!="number"?re:wo(re,Ht))}(m.padding,i),x=kr(y),H=S==="y"?Pe:Re,M=S==="y"?Le:Ie,U=i.rects.reference[R]+i.rects.reference[S]-_[S]-i.rects.popper[R],B=_[S]-i.rects.reference[S],q=yn(y),ne=q?S==="y"?q.clientHeight||0:q.clientWidth||0:0,se=U/2-B/2,V=k[H],Y=ne-x[R]-k[M],W=ne/2-x[R]/2+se,K=vn(V,W,Y),Z=S;i.modifiersData[c]=((e={})[Z]=K,e.centerOffset=K-W,e)}},effect:function(a){var e=a.state,i=a.options.element,c=i===void 0?"[data-popper-arrow]":i;c!=null&&(typeof c!="string"||(c=e.elements.popper.querySelector(c)))&&vo(e.elements.popper,c)&&(e.elements.arrow=c)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Qt(a){return a.split("-")[1]}var Dl={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Ao(a){var e,i=a.popper,c=a.popperRect,m=a.placement,y=a.variation,_=a.offsets,b=a.position,S=a.gpuAcceleration,R=a.adaptive,k=a.roundOffsets,x=a.isFixed,H=_.x,M=H===void 0?0:H,U=_.y,B=U===void 0?0:U,q=typeof k=="function"?k({x:M,y:B}):{x:M,y:B};M=q.x,B=q.y;var ne=_.hasOwnProperty("x"),se=_.hasOwnProperty("y"),V=Re,Y=Pe,W=window;if(R){var K=yn(i),Z="clientHeight",re="clientWidth";K===Ue(i)&&lt(K=pt(i)).position!=="static"&&b==="absolute"&&(Z="scrollHeight",re="scrollWidth"),(m===Pe||(m===Re||m===Ie)&&y===Wt)&&(Y=Le,B-=(x&&K===W&&W.visualViewport?W.visualViewport.height:K[Z])-c.height,B*=S?1:-1),m!==Re&&(m!==Pe&&m!==Le||y!==Wt)||(V=Ie,M-=(x&&K===W&&W.visualViewport?W.visualViewport.width:K[re])-c.width,M*=S?1:-1)}var ee,fe=Object.assign({position:b},R&&Dl),Me=k===!0?function(Ve){var ke=Ve.x,He=Ve.y,$e=window.devicePixelRatio||1;return{x:Vt(ke*$e)/$e||0,y:Vt(He*$e)/$e||0}}({x:M,y:B}):{x:M,y:B};return M=Me.x,B=Me.y,S?Object.assign({},fe,((ee={})[Y]=se?"0":"",ee[V]=ne?"0":"",ee.transform=(W.devicePixelRatio||1)<=1?"translate("+M+"px, "+B+"px)":"translate3d("+M+"px, "+B+"px, 0)",ee)):Object.assign({},fe,((e={})[Y]=se?B+"px":"",e[V]=ne?M+"px":"",e.transform="",e))}const Dr={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(a){var e=a.state,i=a.options,c=i.gpuAcceleration,m=c===void 0||c,y=i.adaptive,_=y===void 0||y,b=i.roundOffsets,S=b===void 0||b,R={placement:Ye(e.placement),variation:Qt(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:m,isFixed:e.options.strategy==="fixed"};e.modifiersData.popperOffsets!=null&&(e.styles.popper=Object.assign({},e.styles.popper,Ao(Object.assign({},R,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:_,roundOffsets:S})))),e.modifiersData.arrow!=null&&(e.styles.arrow=Object.assign({},e.styles.arrow,Ao(Object.assign({},R,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:S})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var Wn={passive:!0};const Nr={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(a){var e=a.state,i=a.instance,c=a.options,m=c.scroll,y=m===void 0||m,_=c.resize,b=_===void 0||_,S=Ue(e.elements.popper),R=[].concat(e.scrollParents.reference,e.scrollParents.popper);return y&&R.forEach(function(k){k.addEventListener("scroll",i.update,Wn)}),b&&S.addEventListener("resize",i.update,Wn),function(){y&&R.forEach(function(k){k.removeEventListener("scroll",i.update,Wn)}),b&&S.removeEventListener("resize",i.update,Wn)}},data:{}};var Nl={left:"right",right:"left",bottom:"top",top:"bottom"};function zn(a){return a.replace(/left|right|bottom|top/g,function(e){return Nl[e]})}var Ll={start:"end",end:"start"};function So(a){return a.replace(/start|end/g,function(e){return Ll[e]})}function Lr(a){var e=Ue(a);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Ir(a){return Gt(pt(a)).left+Lr(a).scrollLeft}function Mr(a){var e=lt(a),i=e.overflow,c=e.overflowX,m=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+m+c)}function Oo(a){return["html","body","#document"].indexOf(Je(a))>=0?a.ownerDocument.body:qe(a)&&Mr(a)?a:Oo(Hn(a))}function _n(a,e){var i;e===void 0&&(e=[]);var c=Oo(a),m=c===((i=a.ownerDocument)==null?void 0:i.body),y=Ue(c),_=m?[y].concat(y.visualViewport||[],Mr(c)?c:[]):c,b=e.concat(_);return m?b:b.concat(_n(Hn(_)))}function Fr(a){return Object.assign({},a,{left:a.x,top:a.y,right:a.x+a.width,bottom:a.y+a.height})}function Co(a,e,i){return e===Or?Fr(function(c,m){var y=Ue(c),_=pt(c),b=y.visualViewport,S=_.clientWidth,R=_.clientHeight,k=0,x=0;if(b){S=b.width,R=b.height;var H=yo();(H||!H&&m==="fixed")&&(k=b.offsetLeft,x=b.offsetTop)}return{width:S,height:R,x:k+Ir(c),y:x}}(a,i)):Ct(e)?function(c,m){var y=Gt(c,!1,m==="fixed");return y.top=y.top+c.clientTop,y.left=y.left+c.clientLeft,y.bottom=y.top+c.clientHeight,y.right=y.left+c.clientWidth,y.width=c.clientWidth,y.height=c.clientHeight,y.x=y.left,y.y=y.top,y}(e,i):Fr(function(c){var m,y=pt(c),_=Lr(c),b=(m=c.ownerDocument)==null?void 0:m.body,S=xt(y.scrollWidth,y.clientWidth,b?b.scrollWidth:0,b?b.clientWidth:0),R=xt(y.scrollHeight,y.clientHeight,b?b.scrollHeight:0,b?b.clientHeight:0),k=-_.scrollLeft+Ir(c),x=-_.scrollTop;return lt(b||y).direction==="rtl"&&(k+=xt(y.clientWidth,b?b.clientWidth:0)-S),{width:S,height:R,x:k,y:x}}(pt(a)))}function xo(a){var e,i=a.reference,c=a.element,m=a.placement,y=m?Ye(m):null,_=m?Qt(m):null,b=i.x+i.width/2-c.width/2,S=i.y+i.height/2-c.height/2;switch(y){case Pe:e={x:b,y:i.y-c.height};break;case Le:e={x:b,y:i.y+i.height};break;case Ie:e={x:i.x+i.width,y:S};break;case Re:e={x:i.x-c.width,y:S};break;default:e={x:i.x,y:i.y}}var R=y?$r(y):null;if(R!=null){var k=R==="y"?"height":"width";switch(_){case Ot:e[R]=e[R]-(i[k]/2-c[k]/2);break;case Wt:e[R]=e[R]+(i[k]/2-c[k]/2)}}return e}function Kt(a,e){e===void 0&&(e={});var i=e,c=i.placement,m=c===void 0?a.placement:c,y=i.strategy,_=y===void 0?a.strategy:y,b=i.boundary,S=b===void 0?io:b,R=i.rootBoundary,k=R===void 0?Or:R,x=i.elementContext,H=x===void 0?zt:x,M=i.altBoundary,U=M!==void 0&&M,B=i.padding,q=B===void 0?0:B,ne=bo(typeof q!="number"?q:wo(q,Ht)),se=H===zt?oo:zt,V=a.rects.popper,Y=a.elements[U?se:H],W=function(ke,He,$e,we){var Ze=He==="clippingParents"?function(oe){var De=_n(Hn(oe)),We=["absolute","fixed"].indexOf(lt(oe).position)>=0&&qe(oe)?yn(oe):oe;return Ct(We)?De.filter(function(ht){return Ct(ht)&&vo(ht,We)&&Je(ht)!=="body"}):[]}(ke):[].concat(He),et=[].concat(Ze,[$e]),Xt=et[0],he=et.reduce(function(oe,De){var We=Co(ke,De,we);return oe.top=xt(We.top,oe.top),oe.right=qn(We.right,oe.right),oe.bottom=qn(We.bottom,oe.bottom),oe.left=xt(We.left,oe.left),oe},Co(ke,Xt,we));return he.width=he.right-he.left,he.height=he.bottom-he.top,he.x=he.left,he.y=he.top,he}(Ct(Y)?Y:Y.contextElement||pt(a.elements.popper),S,k,_),K=Gt(a.elements.reference),Z=xo({reference:K,element:V,strategy:"absolute",placement:m}),re=Fr(Object.assign({},V,Z)),ee=H===zt?re:K,fe={top:W.top-ee.top+ne.top,bottom:ee.bottom-W.bottom+ne.bottom,left:W.left-ee.left+ne.left,right:ee.right-W.right+ne.right},Me=a.modifiersData.offset;if(H===zt&&Me){var Ve=Me[m];Object.keys(fe).forEach(function(ke){var He=[Ie,Le].indexOf(ke)>=0?1:-1,$e=[Pe,Le].indexOf(ke)>=0?"y":"x";fe[ke]+=Ve[$e]*He})}return fe}function Il(a,e){e===void 0&&(e={});var i=e,c=i.placement,m=i.boundary,y=i.rootBoundary,_=i.padding,b=i.flipVariations,S=i.allowedAutoPlacements,R=S===void 0?xr:S,k=Qt(c),x=k?b?Cr:Cr.filter(function(U){return Qt(U)===k}):Ht,H=x.filter(function(U){return R.indexOf(U)>=0});H.length===0&&(H=x);var M=H.reduce(function(U,B){return U[B]=Kt(a,{placement:B,boundary:m,rootBoundary:y,padding:_})[Ye(B)],U},{});return Object.keys(M).sort(function(U,B){return M[U]-M[B]})}const To={name:"flip",enabled:!0,phase:"main",fn:function(a){var e=a.state,i=a.options,c=a.name;if(!e.modifiersData[c]._skip){for(var m=i.mainAxis,y=m===void 0||m,_=i.altAxis,b=_===void 0||_,S=i.fallbackPlacements,R=i.padding,k=i.boundary,x=i.rootBoundary,H=i.altBoundary,M=i.flipVariations,U=M===void 0||M,B=i.allowedAutoPlacements,q=e.options.placement,ne=Ye(q),se=S||(ne!==q&&U?function(oe){if(Ye(oe)===Un)return[];var De=zn(oe);return[So(oe),De,So(De)]}(q):[zn(q)]),V=[q].concat(se).reduce(function(oe,De){return oe.concat(Ye(De)===Un?Il(e,{placement:De,boundary:k,rootBoundary:x,padding:R,flipVariations:U,allowedAutoPlacements:B}):De)},[]),Y=e.rects.reference,W=e.rects.popper,K=new Map,Z=!0,re=V[0],ee=0;ee<V.length;ee++){var fe=V[ee],Me=Ye(fe),Ve=Qt(fe)===Ot,ke=[Pe,Le].indexOf(Me)>=0,He=ke?"width":"height",$e=Kt(e,{placement:fe,boundary:k,rootBoundary:x,altBoundary:H,padding:R}),we=ke?Ve?Ie:Re:Ve?Le:Pe;Y[He]>W[He]&&(we=zn(we));var Ze=zn(we),et=[];if(y&&et.push($e[Me]<=0),b&&et.push($e[we]<=0,$e[Ze]<=0),et.every(function(oe){return oe})){re=fe,Z=!1;break}K.set(fe,et)}if(Z)for(var Xt=function(oe){var De=V.find(function(We){var ht=K.get(We);if(ht)return ht.slice(0,oe).every(function(tr){return tr})});if(De)return re=De,"break"},he=U?3:1;he>0&&Xt(he)!=="break";he--);e.placement!==re&&(e.modifiersData[c]._skip=!0,e.placement=re,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Po(a,e,i){return i===void 0&&(i={x:0,y:0}),{top:a.top-e.height-i.y,right:a.right-e.width+i.x,bottom:a.bottom-e.height+i.y,left:a.left-e.width-i.x}}function Ro(a){return[Pe,Ie,Le,Re].some(function(e){return a[e]>=0})}const ko={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(a){var e=a.state,i=a.name,c=e.rects.reference,m=e.rects.popper,y=e.modifiersData.preventOverflow,_=Kt(e,{elementContext:"reference"}),b=Kt(e,{altBoundary:!0}),S=Po(_,c),R=Po(b,m,y),k=Ro(S),x=Ro(R);e.modifiersData[i]={referenceClippingOffsets:S,popperEscapeOffsets:R,isReferenceHidden:k,hasPopperEscaped:x},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":k,"data-popper-escaped":x})}},$o={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(a){var e=a.state,i=a.options,c=a.name,m=i.offset,y=m===void 0?[0,0]:m,_=xr.reduce(function(k,x){return k[x]=function(H,M,U){var B=Ye(H),q=[Re,Pe].indexOf(B)>=0?-1:1,ne=typeof U=="function"?U(Object.assign({},M,{placement:H})):U,se=ne[0],V=ne[1];return se=se||0,V=(V||0)*q,[Re,Ie].indexOf(B)>=0?{x:V,y:se}:{x:se,y:V}}(x,e.rects,y),k},{}),b=_[e.placement],S=b.x,R=b.y;e.modifiersData.popperOffsets!=null&&(e.modifiersData.popperOffsets.x+=S,e.modifiersData.popperOffsets.y+=R),e.modifiersData[c]=_}},Br={name:"popperOffsets",enabled:!0,phase:"read",fn:function(a){var e=a.state,i=a.name;e.modifiersData[i]=xo({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Do={name:"preventOverflow",enabled:!0,phase:"main",fn:function(a){var e=a.state,i=a.options,c=a.name,m=i.mainAxis,y=m===void 0||m,_=i.altAxis,b=_!==void 0&&_,S=i.boundary,R=i.rootBoundary,k=i.altBoundary,x=i.padding,H=i.tether,M=H===void 0||H,U=i.tetherOffset,B=U===void 0?0:U,q=Kt(e,{boundary:S,rootBoundary:R,padding:x,altBoundary:k}),ne=Ye(e.placement),se=Qt(e.placement),V=!se,Y=$r(ne),W=Y==="x"?"y":"x",K=e.modifiersData.popperOffsets,Z=e.rects.reference,re=e.rects.popper,ee=typeof B=="function"?B(Object.assign({},e.rects,{placement:e.placement})):B,fe=typeof ee=="number"?{mainAxis:ee,altAxis:ee}:Object.assign({mainAxis:0,altAxis:0},ee),Me=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,Ve={x:0,y:0};if(K){if(y){var ke,He=Y==="y"?Pe:Re,$e=Y==="y"?Le:Ie,we=Y==="y"?"height":"width",Ze=K[Y],et=Ze+q[He],Xt=Ze-q[$e],he=M?-re[we]/2:0,oe=se===Ot?Z[we]:re[we],De=se===Ot?-re[we]:-Z[we],We=e.elements.arrow,ht=M&&We?kr(We):{width:0,height:0},tr=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},ys=tr[He],vs=tr[$e],nr=vn(0,Z[we],ht[we]),Oc=V?Z[we]/2-he-nr-ys-fe.mainAxis:oe-nr-ys-fe.mainAxis,Cc=V?-Z[we]/2+he+nr+vs+fe.mainAxis:De+nr+vs+fe.mainAxis,Vr=e.elements.arrow&&yn(e.elements.arrow),xc=Vr?Y==="y"?Vr.clientTop||0:Vr.clientLeft||0:0,_s=(ke=Me==null?void 0:Me[Y])!=null?ke:0,Tc=Ze+Cc-_s,bs=vn(M?qn(et,Ze+Oc-_s-xc):et,Ze,M?xt(Xt,Tc):Xt);K[Y]=bs,Ve[Y]=bs-Ze}if(b){var ws,Pc=Y==="x"?Pe:Re,Rc=Y==="x"?Le:Ie,$t=K[W],rr=W==="y"?"height":"width",Es=$t+q[Pc],As=$t-q[Rc],Gr=[Pe,Re].indexOf(ne)!==-1,Ss=(ws=Me==null?void 0:Me[W])!=null?ws:0,Os=Gr?Es:$t-Z[rr]-re[rr]-Ss+fe.altAxis,Cs=Gr?$t+Z[rr]+re[rr]-Ss-fe.altAxis:As,xs=M&&Gr?function(kc,$c,Qr){var Ts=vn(kc,$c,Qr);return Ts>Qr?Qr:Ts}(Os,$t,Cs):vn(M?Os:Es,$t,M?Cs:As);K[W]=xs,Ve[W]=xs-$t}e.modifiersData[c]=Ve}},requiresIfExists:["offset"]};function Ml(a,e,i){i===void 0&&(i=!1);var c,m,y=qe(e),_=qe(e)&&function(x){var H=x.getBoundingClientRect(),M=Vt(H.width)/x.offsetWidth||1,U=Vt(H.height)/x.offsetHeight||1;return M!==1||U!==1}(e),b=pt(e),S=Gt(a,_,i),R={scrollLeft:0,scrollTop:0},k={x:0,y:0};return(y||!y&&!i)&&((Je(e)!=="body"||Mr(b))&&(R=(c=e)!==Ue(c)&&qe(c)?{scrollLeft:(m=c).scrollLeft,scrollTop:m.scrollTop}:Lr(c)),qe(e)?((k=Gt(e,!0)).x+=e.clientLeft,k.y+=e.clientTop):b&&(k.x=Ir(b))),{x:S.left+R.scrollLeft-k.x,y:S.top+R.scrollTop-k.y,width:S.width,height:S.height}}function Fl(a){var e=new Map,i=new Set,c=[];function m(y){i.add(y.name),[].concat(y.requires||[],y.requiresIfExists||[]).forEach(function(_){if(!i.has(_)){var b=e.get(_);b&&m(b)}}),c.push(y)}return a.forEach(function(y){e.set(y.name,y)}),a.forEach(function(y){i.has(y.name)||m(y)}),c}var No={placement:"bottom",modifiers:[],strategy:"absolute"};function Lo(){for(var a=arguments.length,e=new Array(a),i=0;i<a;i++)e[i]=arguments[i];return!e.some(function(c){return!(c&&typeof c.getBoundingClientRect=="function")})}function Vn(a){a===void 0&&(a={});var e=a,i=e.defaultModifiers,c=i===void 0?[]:i,m=e.defaultOptions,y=m===void 0?No:m;return function(_,b,S){S===void 0&&(S=y);var R,k,x={placement:"bottom",orderedModifiers:[],options:Object.assign({},No,y),modifiersData:{},elements:{reference:_,popper:b},attributes:{},styles:{}},H=[],M=!1,U={state:x,setOptions:function(q){var ne=typeof q=="function"?q(x.options):q;B(),x.options=Object.assign({},y,x.options,ne),x.scrollParents={reference:Ct(_)?_n(_):_.contextElement?_n(_.contextElement):[],popper:_n(b)};var se,V,Y=function(W){var K=Fl(W);return go.reduce(function(Z,re){return Z.concat(K.filter(function(ee){return ee.phase===re}))},[])}((se=[].concat(c,x.options.modifiers),V=se.reduce(function(W,K){var Z=W[K.name];return W[K.name]=Z?Object.assign({},Z,K,{options:Object.assign({},Z.options,K.options),data:Object.assign({},Z.data,K.data)}):K,W},{}),Object.keys(V).map(function(W){return V[W]})));return x.orderedModifiers=Y.filter(function(W){return W.enabled}),x.orderedModifiers.forEach(function(W){var K=W.name,Z=W.options,re=Z===void 0?{}:Z,ee=W.effect;if(typeof ee=="function"){var fe=ee({state:x,name:K,instance:U,options:re});H.push(fe||function(){})}}),U.update()},forceUpdate:function(){if(!M){var q=x.elements,ne=q.reference,se=q.popper;if(Lo(ne,se)){x.rects={reference:Ml(ne,yn(se),x.options.strategy==="fixed"),popper:kr(se)},x.reset=!1,x.placement=x.options.placement,x.orderedModifiers.forEach(function(ee){return x.modifiersData[ee.name]=Object.assign({},ee.data)});for(var V=0;V<x.orderedModifiers.length;V++)if(x.reset!==!0){var Y=x.orderedModifiers[V],W=Y.fn,K=Y.options,Z=K===void 0?{}:K,re=Y.name;typeof W=="function"&&(x=W({state:x,options:Z,name:re,instance:U})||x)}else x.reset=!1,V=-1}}},update:(R=function(){return new Promise(function(q){U.forceUpdate(),q(x)})},function(){return k||(k=new Promise(function(q){Promise.resolve().then(function(){k=void 0,q(R())})})),k}),destroy:function(){B(),M=!0}};if(!Lo(_,b))return U;function B(){H.forEach(function(q){return q()}),H=[]}return U.setOptions(S).then(function(q){!M&&S.onFirstUpdate&&S.onFirstUpdate(q)}),U}}var Bl=Vn(),jl=Vn({defaultModifiers:[Nr,Br,Dr,Pr]}),jr=Vn({defaultModifiers:[Nr,Br,Dr,Pr,$o,To,Do,Eo,ko]});const Io=Object.freeze(Object.defineProperty({__proto__:null,popperGenerator:Vn,detectOverflow:Kt,createPopperBase:Bl,createPopper:jr,createPopperLite:jl,top:Pe,bottom:Le,right:Ie,left:Re,auto:Un,basePlacements:Ht,start:Ot,end:Wt,clippingParents:io,viewport:Or,popper:zt,reference:oo,variationPlacements:Cr,placements:xr,beforeRead:so,read:ao,afterRead:lo,beforeMain:co,main:uo,afterMain:fo,beforeWrite:po,write:ho,afterWrite:mo,modifierPhases:go,applyStyles:Pr,arrow:Eo,computeStyles:Dr,eventListeners:Nr,flip:To,hide:ko,offset:$o,popperOffsets:Br,preventOverflow:Do},Symbol.toStringTag,{value:"Module"})),Mo="dropdown",Ul="ArrowUp",Fo="ArrowDown",Bo="click.bs.dropdown.data-api",jo="keydown.bs.dropdown.data-api",bn="show",Tt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ql=`${Tt}.show`,Gn=".dropdown-menu",Hl=I()?"top-end":"top-start",Wl=I()?"top-start":"top-end",zl=I()?"bottom-end":"bottom-start",Vl=I()?"bottom-start":"bottom-end",Gl=I()?"left-start":"right-start",Ql=I()?"right-start":"left-start",Kl={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Xl={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class ze extends ${constructor(e,i){super(e,i),this._popper=null,this._parent=this._element.parentNode,this._menu=D.next(this._element,Gn)[0]||D.prev(this._element,Gn)[0]||D.findOne(Gn,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Kl}static get DefaultType(){return Xl}static get NAME(){return Mo}toggle(){return this._isShown()?this.hide():this.show()}show(){if(h(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!E.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const i of[].concat(...document.body.children))E.on(i,"mouseover",g);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(bn),this._element.classList.add(bn),E.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(h(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!E.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const i of[].concat(...document.body.children))E.off(i,"mouseover",g);this._popper&&this._popper.destroy(),this._menu.classList.remove(bn),this._element.classList.remove(bn),this._element.setAttribute("aria-expanded","false"),P.removeDataAttribute(this._menu,"popper"),E.trigger(this._element,"hidden.bs.dropdown",e)}}_getConfig(e){if(typeof(e=super._getConfig(e)).reference=="object"&&!f(e.reference)&&typeof e.reference.getBoundingClientRect!="function")throw new TypeError(`${Mo.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(Io===void 0)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;this._config.reference==="parent"?e=this._parent:f(this._config.reference)?e=d(this._config.reference):typeof this._config.reference=="object"&&(e=this._config.reference);const i=this._getPopperConfig();this._popper=jr(e,this._menu,i)}_isShown(){return this._menu.classList.contains(bn)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return Gl;if(e.classList.contains("dropstart"))return Ql;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const i=getComputedStyle(this._menu).getPropertyValue("--bs-position").trim()==="end";return e.classList.contains("dropup")?i?Wl:Hl:i?Vl:zl}_detectNavbar(){return this._element.closest(".navbar")!==null}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(i=>Number.parseInt(i,10)):typeof e=="function"?i=>e(i,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||this._config.display==="static")&&(P.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...typeof this._config.popperConfig=="function"?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:i}){const c=D.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(m=>p(m));c.length&&ae(c,i,e===Fo,!c.includes(i)).focus()}static jQueryInterface(e){return this.each(function(){const i=ze.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}static clearMenus(e){if(e.button===2||e.type==="keyup"&&e.key!=="Tab")return;const i=D.find(ql);for(const c of i){const m=ze.getInstance(c);if(!m||m._config.autoClose===!1)continue;const y=e.composedPath(),_=y.includes(m._menu);if(y.includes(m._element)||m._config.autoClose==="inside"&&!_||m._config.autoClose==="outside"&&_||m._menu.contains(e.target)&&(e.type==="keyup"&&e.key==="Tab"||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const b={relatedTarget:m._element};e.type==="click"&&(b.clickEvent=e),m._completeHide(b)}}static dataApiKeydownHandler(e){const i=/input|textarea/i.test(e.target.tagName),c=e.key==="Escape",m=[Ul,Fo].includes(e.key);if(!m&&!c||i&&!c)return;e.preventDefault();const y=this.matches(Tt)?this:D.prev(this,Tt)[0]||D.next(this,Tt)[0]||D.findOne(Tt,e.delegateTarget.parentNode),_=ze.getOrCreateInstance(y);if(m)return e.stopPropagation(),_.show(),void _._selectMenuItem(e);_._isShown()&&(e.stopPropagation(),_.hide(),y.focus())}}E.on(document,jo,Tt,ze.dataApiKeydownHandler),E.on(document,jo,Gn,ze.dataApiKeydownHandler),E.on(document,Bo,ze.clearMenus),E.on(document,"keyup.bs.dropdown.data-api",ze.clearMenus),E.on(document,Bo,Tt,function(a){a.preventDefault(),ze.getOrCreateInstance(this).toggle()}),O(ze);const Uo=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",qo=".sticky-top",Qn="padding-right",Ho="margin-right";class Ur{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Qn,i=>i+e),this._setElementAttributes(Uo,Qn,i=>i+e),this._setElementAttributes(qo,Ho,i=>i-e)}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Qn),this._resetElementAttributes(Uo,Qn),this._resetElementAttributes(qo,Ho)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,i,c){const m=this.getWidth();this._applyManipulationCallback(e,y=>{if(y!==this._element&&window.innerWidth>y.clientWidth+m)return;this._saveInitialAttribute(y,i);const _=window.getComputedStyle(y).getPropertyValue(i);y.style.setProperty(i,`${c(Number.parseFloat(_))}px`)})}_saveInitialAttribute(e,i){const c=e.style.getPropertyValue(i);c&&P.setDataAttribute(e,i,c)}_resetElementAttributes(e,i){this._applyManipulationCallback(e,c=>{const m=P.getDataAttribute(c,i);m!==null?(P.removeDataAttribute(c,i),c.style.setProperty(i,m)):c.style.removeProperty(i)})}_applyManipulationCallback(e,i){if(f(e))i(e);else for(const c of D.find(e,this._element))i(c)}}const Wo="show",zo="mousedown.bs.backdrop",Jl={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Yl={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Vo extends C{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return Jl}static get DefaultType(){return Yl}static get NAME(){return"backdrop"}show(e){if(!this._config.isVisible)return void N(e);this._append();const i=this._getElement();this._config.isAnimated&&A(i),i.classList.add(Wo),this._emulateAnimation(()=>{N(e)})}hide(e){this._config.isVisible?(this._getElement().classList.remove(Wo),this._emulateAnimation(()=>{this.dispose(),N(e)})):N(e)}dispose(){this._isAppended&&(E.off(this._element,zo),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=d(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),E.on(e,zo,()=>{N(this._config.clickCallback)}),this._isAppended=!0}_emulateAnimation(e){X(e,this._getElement(),this._config.isAnimated)}}const Go=".bs.focustrap",Qo="backward",Zl={autofocus:!0,trapElement:null},ec={autofocus:"boolean",trapElement:"element"};class Ko extends C{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Zl}static get DefaultType(){return ec}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),E.off(document,Go),E.on(document,"focusin.bs.focustrap",e=>this._handleFocusin(e)),E.on(document,"keydown.tab.bs.focustrap",e=>this._handleKeydown(e)),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,E.off(document,Go))}_handleFocusin(e){const{trapElement:i}=this._config;if(e.target===document||e.target===i||i.contains(e.target))return;const c=D.focusableChildren(i);c.length===0?i.focus():this._lastTabNavDirection===Qo?c[c.length-1].focus():c[0].focus()}_handleKeydown(e){e.key==="Tab"&&(this._lastTabNavDirection=e.shiftKey?Qo:"forward")}}const Xo="hidden.bs.modal",Jo="show.bs.modal",Yo="modal-open",Zo="show",qr="modal-static",tc={backdrop:!0,focus:!0,keyboard:!0},nc={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Pt extends ${constructor(e,i){super(e,i),this._dialog=D.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Ur,this._addEventListeners()}static get Default(){return tc}static get DefaultType(){return nc}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||E.trigger(this._element,Jo,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Yo),this._adjustDialog(),this._backdrop.show(()=>this._showElement(e)))}hide(){this._isShown&&!this._isTransitioning&&(E.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Zo),this._queueCallback(()=>this._hideModal(),this._element,this._isAnimated())))}dispose(){for(const e of[window,this._dialog])E.off(e,".bs.modal");this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Vo({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ko({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const i=D.findOne(".modal-body",this._dialog);i&&(i.scrollTop=0),A(this._element),this._element.classList.add(Zo),this._queueCallback(()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,E.trigger(this._element,"shown.bs.modal",{relatedTarget:e})},this._dialog,this._isAnimated())}_addEventListeners(){E.on(this._element,"keydown.dismiss.bs.modal",e=>{if(e.key==="Escape")return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()}),E.on(window,"resize.bs.modal",()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()}),E.on(this._element,"mousedown.dismiss.bs.modal",e=>{E.one(this._element,"click.dismiss.bs.modal",i=>{this._element===e.target&&this._element===i.target&&(this._config.backdrop!=="static"?this._config.backdrop&&this.hide():this._triggerBackdropTransition())})})}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(Yo),this._resetAdjustments(),this._scrollBar.reset(),E.trigger(this._element,Xo)})}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(E.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,i=this._element.style.overflowY;i==="hidden"||this._element.classList.contains(qr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(qr),this._queueCallback(()=>{this._element.classList.remove(qr),this._queueCallback(()=>{this._element.style.overflowY=i},this._dialog)},this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,i=this._scrollBar.getWidth(),c=i>0;if(c&&!e){const m=I()?"paddingLeft":"paddingRight";this._element.style[m]=`${i}px`}if(!c&&e){const m=I()?"paddingRight":"paddingLeft";this._element.style[m]=`${i}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,i){return this.each(function(){const c=Pt.getOrCreateInstance(this,e);if(typeof e=="string"){if(c[e]===void 0)throw new TypeError(`No method named "${e}"`);c[e](i)}})}}E.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',function(a){const e=l(this);["A","AREA"].includes(this.tagName)&&a.preventDefault(),E.one(e,Jo,c=>{c.defaultPrevented||E.one(e,Xo,()=>{p(this)&&this.focus()})});const i=D.findOne(".modal.show");i&&Pt.getInstance(i).hide(),Pt.getOrCreateInstance(e).toggle(this)}),J(Pt),O(Pt);const es="show",ts="showing",ns="hiding",rs=".offcanvas.show",is="hidePrevented.bs.offcanvas",os="hidden.bs.offcanvas",rc={backdrop:!0,keyboard:!0,scroll:!1},ic={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class ct extends ${constructor(e,i){super(e,i),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return rc}static get DefaultType(){return ic}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||E.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||new Ur().hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ts),this._queueCallback(()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(es),this._element.classList.remove(ts),E.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})},this._element,!0))}hide(){this._isShown&&(E.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(ns),this._backdrop.hide(),this._queueCallback(()=>{this._element.classList.remove(es,ns),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||new Ur().reset(),E.trigger(this._element,os)},this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new Vo({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{this._config.backdrop!=="static"?this.hide():E.trigger(this._element,is)}:null})}_initializeFocusTrap(){return new Ko({trapElement:this._element})}_addEventListeners(){E.on(this._element,"keydown.dismiss.bs.offcanvas",e=>{e.key==="Escape"&&(this._config.keyboard?this.hide():E.trigger(this._element,is))})}static jQueryInterface(e){return this.each(function(){const i=ct.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e](this)}})}}E.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',function(a){const e=l(this);if(["A","AREA"].includes(this.tagName)&&a.preventDefault(),h(this))return;E.one(e,os,()=>{p(this)&&this.focus()});const i=D.findOne(rs);i&&i!==e&&ct.getInstance(i).hide(),ct.getOrCreateInstance(e).toggle(this)}),E.on(window,"load.bs.offcanvas.data-api",()=>{for(const a of D.find(rs))ct.getOrCreateInstance(a).show()}),E.on(window,"resize.bs.offcanvas",()=>{for(const a of D.find("[aria-modal][class*=show][class*=offcanvas-]"))getComputedStyle(a).position!=="fixed"&&ct.getOrCreateInstance(a).hide()}),J(ct),O(ct);const oc=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),sc=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,ac=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,lc=(a,e)=>{const i=a.nodeName.toLowerCase();return e.includes(i)?!oc.has(i)||Boolean(sc.test(a.nodeValue)||ac.test(a.nodeValue)):e.filter(c=>c instanceof RegExp).some(c=>c.test(i))},ss={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},cc={allowList:ss,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},uc={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},fc={entry:"(string|element|function|null)",selector:"(string|element)"};class dc extends C{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return cc}static get DefaultType(){return uc}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map(e=>this._resolvePossibleFunction(e)).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[m,y]of Object.entries(this._config.content))this._setContent(e,y,m);const i=e.children[0],c=this._resolvePossibleFunction(this._config.extraClass);return c&&i.classList.add(...c.split(" ")),i}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[i,c]of Object.entries(e))super._typeCheckConfig({selector:i,entry:c},fc)}_setContent(e,i,c){const m=D.findOne(c,e);m&&((i=this._resolvePossibleFunction(i))?f(i)?this._putElementInTemplate(d(i),m):this._config.html?m.innerHTML=this._maybeSanitize(i):m.textContent=i:m.remove())}_maybeSanitize(e){return this._config.sanitize?function(i,c,m){if(!i.length)return i;if(m&&typeof m=="function")return m(i);const y=new window.DOMParser().parseFromString(i,"text/html"),_=[].concat(...y.body.querySelectorAll("*"));for(const b of _){const S=b.nodeName.toLowerCase();if(!Object.keys(c).includes(S)){b.remove();continue}const R=[].concat(...b.attributes),k=[].concat(c["*"]||[],c[S]||[]);for(const x of R)lc(x,k)||b.removeAttribute(x.nodeName)}return y.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return typeof e=="function"?e(this):e}_putElementInTemplate(e,i){if(this._config.html)return i.innerHTML="",void i.append(e);i.textContent=e.textContent}}const pc=new Set(["sanitize","allowList","sanitizeFn"]),Hr="fade",Kn="show",as=".modal",ls="hide.bs.modal",Xn="hover",cs="focus",hc={AUTO:"auto",TOP:"top",RIGHT:I()?"left":"right",BOTTOM:"bottom",LEFT:I()?"right":"left"},mc={allowList:ss,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},gc={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Rt extends ${constructor(e,i){if(Io===void 0)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,i),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return mc}static get DefaultType(){return gc}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),E.off(this._element.closest(as),ls,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if(this._element.style.display==="none")throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=E.trigger(this._element,this.constructor.eventName("show")),i=(v(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!i)return;this._disposePopper();const c=this._getTipElement();this._element.setAttribute("aria-describedby",c.getAttribute("id"));const{container:m}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(m.append(c),E.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(c),c.classList.add(Kn),"ontouchstart"in document.documentElement)for(const y of[].concat(...document.body.children))E.on(y,"mouseover",g);this._queueCallback(()=>{E.trigger(this._element,this.constructor.eventName("shown")),this._isHovered===!1&&this._leave(),this._isHovered=!1},this.tip,this._isAnimated())}hide(){if(this._isShown()&&!E.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(Kn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))E.off(e,"mouseover",g);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=null,this._queueCallback(()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),E.trigger(this._element,this.constructor.eventName("hidden")))},this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const i=this._getTemplateFactory(e).toHtml();if(!i)return null;i.classList.remove(Hr,Kn),i.classList.add(`bs-${this.constructor.NAME}-auto`);const c=(m=>{do m+=Math.floor(1e6*Math.random());while(document.getElementById(m));return m})(this.constructor.NAME).toString();return i.setAttribute("id",c),this._isAnimated()&&i.classList.add(Hr),i}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new dc({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Hr)}_isShown(){return this.tip&&this.tip.classList.contains(Kn)}_createPopper(e){const i=typeof this._config.placement=="function"?this._config.placement.call(this,e,this._element):this._config.placement,c=hc[i.toUpperCase()];return jr(this._element,e,this._getPopperConfig(c))}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(i=>Number.parseInt(i,10)):typeof e=="function"?i=>e(i,this._element):e}_resolvePossibleFunction(e){return typeof e=="function"?e.call(this._element):e}_getPopperConfig(e){const i={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:c=>{this._getTipElement().setAttribute("data-popper-placement",c.state.placement)}}]};return{...i,...typeof this._config.popperConfig=="function"?this._config.popperConfig(i):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const i of e)if(i==="click")E.on(this._element,this.constructor.eventName("click"),this._config.selector,c=>{this._initializeOnDelegatedTarget(c).toggle()});else if(i!=="manual"){const c=i===Xn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),m=i===Xn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");E.on(this._element,c,this._config.selector,y=>{const _=this._initializeOnDelegatedTarget(y);_._activeTrigger[y.type==="focusin"?cs:Xn]=!0,_._enter()}),E.on(this._element,m,this._config.selector,y=>{const _=this._initializeOnDelegatedTarget(y);_._activeTrigger[y.type==="focusout"?cs:Xn]=_._element.contains(y.relatedTarget),_._leave()})}this._hideModalHandler=()=>{this._element&&this.hide()},E.on(this._element.closest(as),ls,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout(()=>{this._isHovered&&this.show()},this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(()=>{this._isHovered||this.hide()},this._config.delay.hide))}_setTimeout(e,i){clearTimeout(this._timeout),this._timeout=setTimeout(e,i)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const i=P.getDataAttributes(this._element);for(const c of Object.keys(i))pc.has(c)&&delete i[c];return e={...i,...typeof e=="object"&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=e.container===!1?document.body:d(e.container),typeof e.delay=="number"&&(e.delay={show:e.delay,hide:e.delay}),typeof e.title=="number"&&(e.title=e.title.toString()),typeof e.content=="number"&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const i in this._config)this.constructor.Default[i]!==this._config[i]&&(e[i]=this._config[i]);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each(function(){const i=Rt.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}}O(Rt);const yc={...Rt.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},vc={...Rt.DefaultType,content:"(null|string|element|function)"};class Jn extends Rt{static get Default(){return yc}static get DefaultType(){return vc}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each(function(){const i=Jn.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e]()}})}}O(Jn);const us="click.bs.scrollspy",wn="active",fs="[href]",_c={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},bc={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class En extends ${constructor(e,i){super(e,i),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement=getComputedStyle(this._element).overflowY==="visible"?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return _c}static get DefaultType(){return bc}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=d(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,typeof e.threshold=="string"&&(e.threshold=e.threshold.split(",").map(i=>Number.parseFloat(i))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(E.off(this._config.target,us),E.on(this._config.target,us,fs,e=>{const i=this._observableSections.get(e.target.hash);if(i){e.preventDefault();const c=this._rootElement||window,m=i.offsetTop-this._element.offsetTop;if(c.scrollTo)return void c.scrollTo({top:m,behavior:"smooth"});c.scrollTop=m}}))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(i=>this._observerCallback(i),e)}_observerCallback(e){const i=_=>this._targetLinks.get(`#${_.target.id}`),c=_=>{this._previousScrollData.visibleEntryTop=_.target.offsetTop,this._process(i(_))},m=(this._rootElement||document.documentElement).scrollTop,y=m>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=m;for(const _ of e){if(!_.isIntersecting){this._activeTarget=null,this._clearActiveClass(i(_));continue}const b=_.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(y&&b){if(c(_),!m)return}else y||b||c(_)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=D.find(fs,this._config.target);for(const i of e){if(!i.hash||h(i))continue;const c=D.findOne(i.hash,this._element);p(c)&&(this._targetLinks.set(i.hash,i),this._observableSections.set(i.hash,c))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(wn),this._activateParents(e),E.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))D.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(wn);else for(const i of D.parents(e,".nav, .list-group"))for(const c of D.prev(i,".nav-link, .nav-item > .nav-link, .list-group-item"))c.classList.add(wn)}_clearActiveClass(e){e.classList.remove(wn);const i=D.find("[href].active",e);for(const c of i)c.classList.remove(wn)}static jQueryInterface(e){return this.each(function(){const i=En.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}})}}E.on(window,"load.bs.scrollspy.data-api",()=>{for(const a of D.find('[data-bs-spy="scroll"]'))En.getOrCreateInstance(a)}),O(En);const wc="ArrowLeft",ds="ArrowRight",Ec="ArrowUp",ps="ArrowDown",Yn="active",hs="fade",Wr="show",ms='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',zr=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${ms}`;class kt extends ${constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),E.on(this._element,"keydown.bs.tab",i=>this._keydown(i)))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const i=this._getActiveElem(),c=i?E.trigger(i,"hide.bs.tab",{relatedTarget:e}):null;E.trigger(e,"show.bs.tab",{relatedTarget:i}).defaultPrevented||c&&c.defaultPrevented||(this._deactivate(i,e),this._activate(e,i))}_activate(e,i){e&&(e.classList.add(Yn),this._activate(l(e)),this._queueCallback(()=>{e.getAttribute("role")==="tab"?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),E.trigger(e,"shown.bs.tab",{relatedTarget:i})):e.classList.add(Wr)},e,e.classList.contains(hs)))}_deactivate(e,i){e&&(e.classList.remove(Yn),e.blur(),this._deactivate(l(e)),this._queueCallback(()=>{e.getAttribute("role")==="tab"?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),E.trigger(e,"hidden.bs.tab",{relatedTarget:i})):e.classList.remove(Wr)},e,e.classList.contains(hs)))}_keydown(e){if(![wc,ds,Ec,ps].includes(e.key))return;e.stopPropagation(),e.preventDefault();const i=[ds,ps].includes(e.key),c=ae(this._getChildren().filter(m=>!h(m)),e.target,i,!0);c&&(c.focus({preventScroll:!0}),kt.getOrCreateInstance(c).show())}_getChildren(){return D.find(zr,this._parent)}_getActiveElem(){return this._getChildren().find(e=>this._elemIsActive(e))||null}_setInitialAttributes(e,i){this._setAttributeIfNotExists(e,"role","tablist");for(const c of i)this._setInitialAttributesOnChild(c)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const i=this._elemIsActive(e),c=this._getOuterElement(e);e.setAttribute("aria-selected",i),c!==e&&this._setAttributeIfNotExists(c,"role","presentation"),i||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const i=l(e);i&&(this._setAttributeIfNotExists(i,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(i,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,i){const c=this._getOuterElement(e);if(!c.classList.contains("dropdown"))return;const m=(y,_)=>{const b=D.findOne(y,c);b&&b.classList.toggle(_,i)};m(".dropdown-toggle",Yn),m(".dropdown-menu",Wr),c.setAttribute("aria-expanded",i)}_setAttributeIfNotExists(e,i,c){e.hasAttribute(i)||e.setAttribute(i,c)}_elemIsActive(e){return e.classList.contains(Yn)}_getInnerElement(e){return e.matches(zr)?e:D.findOne(zr,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each(function(){const i=kt.getOrCreateInstance(this);if(typeof e=="string"){if(i[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);i[e]()}})}}E.on(document,"click.bs.tab",ms,function(a){["A","AREA"].includes(this.tagName)&&a.preventDefault(),h(this)||kt.getOrCreateInstance(this).show()}),E.on(window,"load.bs.tab",()=>{for(const a of D.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))kt.getOrCreateInstance(a)}),O(kt);const gs="hide",Zn="show",er="showing",Ac={animation:"boolean",autohide:"boolean",delay:"number"},Sc={animation:!0,autohide:!0,delay:5e3};class An extends ${constructor(e,i){super(e,i),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Sc}static get DefaultType(){return Ac}static get NAME(){return"toast"}show(){E.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(gs),A(this._element),this._element.classList.add(Zn,er),this._queueCallback(()=>{this._element.classList.remove(er),E.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()},this._element,this._config.animation))}hide(){this.isShown()&&(E.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(er),this._queueCallback(()=>{this._element.classList.add(gs),this._element.classList.remove(er,Zn),E.trigger(this._element,"hidden.bs.toast")},this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Zn),super.dispose()}isShown(){return this._element.classList.contains(Zn)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay)))}_onInteraction(e,i){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=i;break;case"focusin":case"focusout":this._hasKeyboardInteraction=i}if(i)return void this._clearTimeout();const c=e.relatedTarget;this._element===c||this._element.contains(c)||this._maybeScheduleHide()}_setListeners(){E.on(this._element,"mouseover.bs.toast",e=>this._onInteraction(e,!0)),E.on(this._element,"mouseout.bs.toast",e=>this._onInteraction(e,!1)),E.on(this._element,"focusin.bs.toast",e=>this._onInteraction(e,!0)),E.on(this._element,"focusout.bs.toast",e=>this._onInteraction(e,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each(function(){const i=An.getOrCreateInstance(this,e);if(typeof e=="string"){if(i[e]===void 0)throw new TypeError(`No method named "${e}"`);i[e](this)}})}}return J(An),O(An),{Alert:le,Button:j,Carousel:Ut,Collapse:qt,Dropdown:ze,Modal:Pt,Offcanvas:ct,Popover:Jn,ScrollSpy:En,Tab:kt,Toast:An,Tooltip:Rt}})})(cd);const ud={name:"Toast",props:{maxMessages:{type:Number,default:4},timeOut:{type:Number,default:5e3},closeable:{type:Boolean,default:!0}},data(){return{ids:0,messages:[]}},created(){Dn.on("toast",this.handleMessageEvent)},methods:{handleMessageEvent(n){if(!n.message)throw new Error("A toast payload MUST contain the .message attribute!");const t=this.ids++,r=Object.assign({},{id:t,message:n.message,type:n.type||"notification",timeOut:this.timeOut,closeable:this.closeable,animationFrame:null},n.options||{});this.messages.unshift(r),this.messages.length>this.maxMessages&&this.messages.splice(this.maxMessages);const o=this;setTimeout(()=>{o.removeMessage(t)},this.timeOut)},getToastHeaderClass(n){return["toast-header",`bg-${n}`]},removeMessage(n){const t=this.messages.findIndex(r=>r.id===n);this.messages.splice(t,1)},getMessageHeaderText(n){const t=n==="danger"?"Error":"Notification";return t.charAt(0).toUpperCase()+t.slice(1)}}},fd={class:"toast-container","aria-live":"polite","aria-atomic":"true"},dd={class:"position-fixed top-0 end-0 px-2",style:{"z-index":"11"}},pd={class:"me-auto text-white"},hd=["onClick"],md={class:"toast-body"};function gd(n,t,r,o,s,l){return it(),ot("div",fd,[z("div",dd,[pe(Kc,{name:"toast",tag:"div",appear:""},{default:_t(()=>[(it(!0),ot(Xc,null,Jc(s.messages,u=>(it(),ot("div",{key:u.id,class:"toast show mt-2",role:"alert","aria-live":"assertive","aria-atomic":"true"},[z("div",{class:Ia(l.getToastHeaderClass(u.type))},[z("strong",pd,Si(l.getMessageHeaderText(u.type)),1),u.closeable?(it(),ot("button",{key:0,onClick:f=>l.removeMessage(u.id),type:"button",class:"me-2 mb-1 btn-close btn-close-white","data-bs-dismiss":"toast","aria-label":"Close"},null,8,hd)):Yc("",!0)],2),z("div",md,Si(u.message),1)]))),128))]),_:1})])])}const yd=dn(ud,[["render",gd]]),vd={install(n){n.config.globalProperties.$toast={error(t,r={}){this.send(t,"danger",r)},notification(t,r={}){this.send(t,"primary",r)},send(t,r,o){Dn.emit("toast",{message:t,type:r,options:o})}},n.component("Toast",yd)}};var Ti={},_d={get exports(){return Ti},set exports(n){Ti=n}},ur={},bd={get exports(){return ur},set exports(n){ur=n}},Ja=function(t,r){return function(){for(var s=new Array(arguments.length),l=0;l<s.length;l++)s[l]=arguments[l];return t.apply(r,s)}},wd=Ja,qi=Object.prototype.toString,Hi=function(n){return function(t){var r=qi.call(t);return n[r]||(n[r]=r.slice(8,-1).toLowerCase())}}(Object.create(null));function Mt(n){return n=n.toLowerCase(),function(r){return Hi(r)===n}}function Wi(n){return Array.isArray(n)}function fr(n){return typeof n>"u"}function Ed(n){return n!==null&&!fr(n)&&n.constructor!==null&&!fr(n.constructor)&&typeof n.constructor.isBuffer=="function"&&n.constructor.isBuffer(n)}var Ya=Mt("ArrayBuffer");function Ad(n){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(n):t=n&&n.buffer&&Ya(n.buffer),t}function Sd(n){return typeof n=="string"}function Od(n){return typeof n=="number"}function Za(n){return n!==null&&typeof n=="object"}function ar(n){if(Hi(n)!=="object")return!1;var t=Object.getPrototypeOf(n);return t===null||t===Object.prototype}var Cd=Mt("Date"),xd=Mt("File"),Td=Mt("Blob"),Pd=Mt("FileList");function zi(n){return qi.call(n)==="[object Function]"}function Rd(n){return Za(n)&&zi(n.pipe)}function kd(n){var t="[object FormData]";return n&&(typeof FormData=="function"&&n instanceof FormData||qi.call(n)===t||zi(n.toString)&&n.toString()===t)}var $d=Mt("URLSearchParams");function Dd(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")}function Nd(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function Vi(n,t){if(!(n===null||typeof n>"u"))if(typeof n!="object"&&(n=[n]),Wi(n))for(var r=0,o=n.length;r<o;r++)t.call(null,n[r],r,n);else for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.call(null,n[s],s,n)}function Pi(){var n={};function t(s,l){ar(n[l])&&ar(s)?n[l]=Pi(n[l],s):ar(s)?n[l]=Pi({},s):Wi(s)?n[l]=s.slice():n[l]=s}for(var r=0,o=arguments.length;r<o;r++)Vi(arguments[r],t);return n}function Ld(n,t,r){return Vi(t,function(s,l){r&&typeof s=="function"?n[l]=wd(s,r):n[l]=s}),n}function Id(n){return n.charCodeAt(0)===65279&&(n=n.slice(1)),n}function Md(n,t,r,o){n.prototype=Object.create(t.prototype,o),n.prototype.constructor=n,r&&Object.assign(n.prototype,r)}function Fd(n,t,r){var o,s,l,u={};t=t||{};do{for(o=Object.getOwnPropertyNames(n),s=o.length;s-- >0;)l=o[s],u[l]||(t[l]=n[l],u[l]=!0);n=Object.getPrototypeOf(n)}while(n&&(!r||r(n,t))&&n!==Object.prototype);return t}function Bd(n,t,r){n=String(n),(r===void 0||r>n.length)&&(r=n.length),r-=t.length;var o=n.indexOf(t,r);return o!==-1&&o===r}function jd(n){if(!n)return null;var t=n.length;if(fr(t))return null;for(var r=new Array(t);t-- >0;)r[t]=n[t];return r}var Ud=function(n){return function(t){return n&&t instanceof n}}(typeof Uint8Array<"u"&&Object.getPrototypeOf(Uint8Array)),Ae={isArray:Wi,isArrayBuffer:Ya,isBuffer:Ed,isFormData:kd,isArrayBufferView:Ad,isString:Sd,isNumber:Od,isObject:Za,isPlainObject:ar,isUndefined:fr,isDate:Cd,isFile:xd,isBlob:Td,isFunction:zi,isStream:Rd,isURLSearchParams:$d,isStandardBrowserEnv:Nd,forEach:Vi,merge:Pi,extend:Ld,trim:Dd,stripBOM:Id,inherits:Md,toFlatObject:Fd,kindOf:Hi,kindOfTest:Mt,endsWith:Bd,toArray:jd,isTypedArray:Ud,isFileList:Pd},Yt=Ae;function Qs(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var el=function(t,r,o){if(!r)return t;var s;if(o)s=o(r);else if(Yt.isURLSearchParams(r))s=r.toString();else{var l=[];Yt.forEach(r,function(d,p){d===null||typeof d>"u"||(Yt.isArray(d)?p=p+"[]":d=[d],Yt.forEach(d,function(v){Yt.isDate(v)?v=v.toISOString():Yt.isObject(v)&&(v=JSON.stringify(v)),l.push(Qs(p)+"="+Qs(v))}))}),s=l.join("&")}if(s){var u=t.indexOf("#");u!==-1&&(t=t.slice(0,u)),t+=(t.indexOf("?")===-1?"?":"&")+s}return t},qd=Ae;function yr(){this.handlers=[]}yr.prototype.use=function(t,r,o){return this.handlers.push({fulfilled:t,rejected:r,synchronous:o?o.synchronous:!1,runWhen:o?o.runWhen:null}),this.handlers.length-1};yr.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};yr.prototype.forEach=function(t){qd.forEach(this.handlers,function(o){o!==null&&t(o)})};var Hd=yr,Wd=Ae,zd=function(t,r){Wd.forEach(t,function(s,l){l!==r&&l.toUpperCase()===r.toUpperCase()&&(t[r]=s,delete t[l])})},tl=Ae;function an(n,t,r,o,s){Error.call(this),this.message=n,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),o&&(this.request=o),s&&(this.response=s)}tl.inherits(an,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var nl=an.prototype,rl={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach(function(n){rl[n]={value:n}});Object.defineProperties(an,rl);Object.defineProperty(nl,"isAxiosError",{value:!0});an.from=function(n,t,r,o,s,l){var u=Object.create(nl);return tl.toFlatObject(n,u,function(d){return d!==Error.prototype}),an.call(u,n.message,t,r,o,s),u.name=n.name,l&&Object.assign(u,l),u};var pn=an,il={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Ge=Ae;function Vd(n,t){t=t||new FormData;var r=[];function o(l){return l===null?"":Ge.isDate(l)?l.toISOString():Ge.isArrayBuffer(l)||Ge.isTypedArray(l)?typeof Blob=="function"?new Blob([l]):Buffer.from(l):l}function s(l,u){if(Ge.isPlainObject(l)||Ge.isArray(l)){if(r.indexOf(l)!==-1)throw Error("Circular reference detected in "+u);r.push(l),Ge.forEach(l,function(d,p){if(!Ge.isUndefined(d)){var h=u?u+"."+p:p,v;if(d&&!u&&typeof d=="object"){if(Ge.endsWith(p,"{}"))d=JSON.stringify(d);else if(Ge.endsWith(p,"[]")&&(v=Ge.toArray(d))){v.forEach(function(g){!Ge.isUndefined(g)&&t.append(h,o(g))});return}}s(d,h)}}),r.pop()}else t.append(u,o(l))}return s(n),t}var ol=Vd,Zr,Ks;function Gd(){if(Ks)return Zr;Ks=1;var n=pn;return Zr=function(r,o,s){var l=s.config.validateStatus;!s.status||!l||l(s.status)?r(s):o(new n("Request failed with status code "+s.status,[n.ERR_BAD_REQUEST,n.ERR_BAD_RESPONSE][Math.floor(s.status/100)-4],s.config,s.request,s))},Zr}var ei,Xs;function Qd(){if(Xs)return ei;Xs=1;var n=Ae;return ei=n.isStandardBrowserEnv()?function(){return{write:function(o,s,l,u,f,d){var p=[];p.push(o+"="+encodeURIComponent(s)),n.isNumber(l)&&p.push("expires="+new Date(l).toGMTString()),n.isString(u)&&p.push("path="+u),n.isString(f)&&p.push("domain="+f),d===!0&&p.push("secure"),document.cookie=p.join("; ")},read:function(o){var s=document.cookie.match(new RegExp("(^|;\\s*)("+o+")=([^;]*)"));return s?decodeURIComponent(s[3]):null},remove:function(o){this.write(o,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),ei}var Kd=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)},Xd=function(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t},Jd=Kd,Yd=Xd,sl=function(t,r){return t&&!Jd(r)?Yd(t,r):r},ti,Js;function Zd(){if(Js)return ti;Js=1;var n=Ae,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return ti=function(o){var s={},l,u,f;return o&&n.forEach(o.split(`
`),function(p){if(f=p.indexOf(":"),l=n.trim(p.substr(0,f)).toLowerCase(),u=n.trim(p.substr(f+1)),l){if(s[l]&&t.indexOf(l)>=0)return;l==="set-cookie"?s[l]=(s[l]?s[l]:[]).concat([u]):s[l]=s[l]?s[l]+", "+u:u}}),s},ti}var ni,Ys;function ep(){if(Ys)return ni;Ys=1;var n=Ae;return ni=n.isStandardBrowserEnv()?function(){var r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a"),s;function l(u){var f=u;return r&&(o.setAttribute("href",f),f=o.href),o.setAttribute("href",f),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:o.pathname.charAt(0)==="/"?o.pathname:"/"+o.pathname}}return s=l(window.location.href),function(f){var d=n.isString(f)?l(f):f;return d.protocol===s.protocol&&d.host===s.host}}():function(){return function(){return!0}}(),ni}var ri,Zs;function vr(){if(Zs)return ri;Zs=1;var n=pn,t=Ae;function r(o){n.call(this,o??"canceled",n.ERR_CANCELED),this.name="CanceledError"}return t.inherits(r,n,{__CANCEL__:!0}),ri=r,ri}var ii,ea;function tp(){return ea||(ea=1,ii=function(t){var r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return r&&r[1]||""}),ii}var oi,ta;function na(){if(ta)return oi;ta=1;var n=Ae,t=Gd(),r=Qd(),o=el,s=sl,l=Zd(),u=ep(),f=il,d=pn,p=vr(),h=tp();return oi=function(g){return new Promise(function(T,F){var I=g.data,O=g.headers,N=g.responseType,X;function ae(){g.cancelToken&&g.cancelToken.unsubscribe(X),g.signal&&g.signal.removeEventListener("abort",X)}n.isFormData(I)&&n.isStandardBrowserEnv()&&delete O["Content-Type"];var L=new XMLHttpRequest;if(g.auth){var de=g.auth.username||"",ye=g.auth.password?unescape(encodeURIComponent(g.auth.password)):"";O.Authorization="Basic "+btoa(de+":"+ye)}var xe=s(g.baseURL,g.url);L.open(g.method.toUpperCase(),o(xe,g.params,g.paramsSerializer),!0),L.timeout=g.timeout;function ve(){if(L){var ie="getAllResponseHeaders"in L?l(L.getAllResponseHeaders()):null,ue=!N||N==="text"||N==="json"?L.responseText:L.response,ce={data:ue,status:L.status,statusText:L.statusText,headers:ie,config:g,request:L};t(function(be){T(be),ae()},function(be){F(be),ae()},ce),L=null}}if("onloadend"in L?L.onloadend=ve:L.onreadystatechange=function(){!L||L.readyState!==4||L.status===0&&!(L.responseURL&&L.responseURL.indexOf("file:")===0)||setTimeout(ve)},L.onabort=function(){L&&(F(new d("Request aborted",d.ECONNABORTED,g,L)),L=null)},L.onerror=function(){F(new d("Network Error",d.ERR_NETWORK,g,L,L)),L=null},L.ontimeout=function(){var ue=g.timeout?"timeout of "+g.timeout+"ms exceeded":"timeout exceeded",ce=g.transitional||f;g.timeoutErrorMessage&&(ue=g.timeoutErrorMessage),F(new d(ue,ce.clarifyTimeoutError?d.ETIMEDOUT:d.ECONNABORTED,g,L)),L=null},n.isStandardBrowserEnv()){var Te=(g.withCredentials||u(xe))&&g.xsrfCookieName?r.read(g.xsrfCookieName):void 0;Te&&(O[g.xsrfHeaderName]=Te)}"setRequestHeader"in L&&n.forEach(O,function(ue,ce){typeof I>"u"&&ce.toLowerCase()==="content-type"?delete O[ce]:L.setRequestHeader(ce,ue)}),n.isUndefined(g.withCredentials)||(L.withCredentials=!!g.withCredentials),N&&N!=="json"&&(L.responseType=g.responseType),typeof g.onDownloadProgress=="function"&&L.addEventListener("progress",g.onDownloadProgress),typeof g.onUploadProgress=="function"&&L.upload&&L.upload.addEventListener("progress",g.onUploadProgress),(g.cancelToken||g.signal)&&(X=function(ie){L&&(F(!ie||ie&&ie.type?new p:ie),L.abort(),L=null)},g.cancelToken&&g.cancelToken.subscribe(X),g.signal&&(g.signal.aborted?X():g.signal.addEventListener("abort",X))),I||(I=null);var Se=h(xe);if(Se&&["http","https","file"].indexOf(Se)===-1){F(new d("Unsupported protocol "+Se+":",d.ERR_BAD_REQUEST,g));return}L.send(I)})},oi}var si,ra;function np(){return ra||(ra=1,si=null),si}var ge=Ae,ia=zd,oa=pn,rp=il,ip=ol,op={"Content-Type":"application/x-www-form-urlencoded"};function sa(n,t){!ge.isUndefined(n)&&ge.isUndefined(n["Content-Type"])&&(n["Content-Type"]=t)}function sp(){var n;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(n=na()),n}function ap(n,t,r){if(ge.isString(n))try{return(t||JSON.parse)(n),ge.trim(n)}catch(o){if(o.name!=="SyntaxError")throw o}return(r||JSON.stringify)(n)}var _r={transitional:rp,adapter:sp(),transformRequest:[function(t,r){if(ia(r,"Accept"),ia(r,"Content-Type"),ge.isFormData(t)||ge.isArrayBuffer(t)||ge.isBuffer(t)||ge.isStream(t)||ge.isFile(t)||ge.isBlob(t))return t;if(ge.isArrayBufferView(t))return t.buffer;if(ge.isURLSearchParams(t))return sa(r,"application/x-www-form-urlencoded;charset=utf-8"),t.toString();var o=ge.isObject(t),s=r&&r["Content-Type"],l;if((l=ge.isFileList(t))||o&&s==="multipart/form-data"){var u=this.env&&this.env.FormData;return ip(l?{"files[]":t}:t,u&&new u)}else if(o||s==="application/json")return sa(r,"application/json"),ap(t);return t}],transformResponse:[function(t){var r=this.transitional||_r.transitional,o=r&&r.silentJSONParsing,s=r&&r.forcedJSONParsing,l=!o&&this.responseType==="json";if(l||s&&ge.isString(t)&&t.length)try{return JSON.parse(t)}catch(u){if(l)throw u.name==="SyntaxError"?oa.from(u,oa.ERR_BAD_RESPONSE,this,null,this.response):u}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:np()},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};ge.forEach(["delete","get","head"],function(t){_r.headers[t]={}});ge.forEach(["post","put","patch"],function(t){_r.headers[t]=ge.merge(op)});var Gi=_r,lp=Ae,cp=Gi,up=function(t,r,o){var s=this||cp;return lp.forEach(o,function(u){t=u.call(s,t,r)}),t},ai,aa;function al(){return aa||(aa=1,ai=function(t){return!!(t&&t.__CANCEL__)}),ai}var la=Ae,li=up,fp=al(),dp=Gi,pp=vr();function ci(n){if(n.cancelToken&&n.cancelToken.throwIfRequested(),n.signal&&n.signal.aborted)throw new pp}var hp=function(t){ci(t),t.headers=t.headers||{},t.data=li.call(t,t.data,t.headers,t.transformRequest),t.headers=la.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),la.forEach(["delete","get","head","post","put","patch","common"],function(s){delete t.headers[s]});var r=t.adapter||dp.adapter;return r(t).then(function(s){return ci(t),s.data=li.call(t,s.data,s.headers,t.transformResponse),s},function(s){return fp(s)||(ci(t),s&&s.response&&(s.response.data=li.call(t,s.response.data,s.response.headers,t.transformResponse))),Promise.reject(s)})},Fe=Ae,ll=function(t,r){r=r||{};var o={};function s(h,v){return Fe.isPlainObject(h)&&Fe.isPlainObject(v)?Fe.merge(h,v):Fe.isPlainObject(v)?Fe.merge({},v):Fe.isArray(v)?v.slice():v}function l(h){if(Fe.isUndefined(r[h])){if(!Fe.isUndefined(t[h]))return s(void 0,t[h])}else return s(t[h],r[h])}function u(h){if(!Fe.isUndefined(r[h]))return s(void 0,r[h])}function f(h){if(Fe.isUndefined(r[h])){if(!Fe.isUndefined(t[h]))return s(void 0,t[h])}else return s(void 0,r[h])}function d(h){if(h in r)return s(t[h],r[h]);if(h in t)return s(void 0,t[h])}var p={url:u,method:u,data:u,baseURL:f,transformRequest:f,transformResponse:f,paramsSerializer:f,timeout:f,timeoutMessage:f,withCredentials:f,adapter:f,responseType:f,xsrfCookieName:f,xsrfHeaderName:f,onUploadProgress:f,onDownloadProgress:f,decompress:f,maxContentLength:f,maxBodyLength:f,beforeRedirect:f,transport:f,httpAgent:f,httpsAgent:f,cancelToken:f,socketPath:f,responseEncoding:f,validateStatus:d};return Fe.forEach(Object.keys(t).concat(Object.keys(r)),function(v){var g=p[v]||l,A=g(v);Fe.isUndefined(A)&&g!==d||(o[v]=A)}),o},ui,ca;function cl(){return ca||(ca=1,ui={version:"0.27.2"}),ui}var mp=cl().version,yt=pn,Qi={};["object","boolean","number","function","string","symbol"].forEach(function(n,t){Qi[n]=function(o){return typeof o===n||"a"+(t<1?"n ":" ")+n}});var ua={};Qi.transitional=function(t,r,o){function s(l,u){return"[Axios v"+mp+"] Transitional option '"+l+"'"+u+(o?". "+o:"")}return function(l,u,f){if(t===!1)throw new yt(s(u," has been removed"+(r?" in "+r:"")),yt.ERR_DEPRECATED);return r&&!ua[u]&&(ua[u]=!0,console.warn(s(u," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(l,u,f):!0}};function gp(n,t,r){if(typeof n!="object")throw new yt("options must be an object",yt.ERR_BAD_OPTION_VALUE);for(var o=Object.keys(n),s=o.length;s-- >0;){var l=o[s],u=t[l];if(u){var f=n[l],d=f===void 0||u(f,l,n);if(d!==!0)throw new yt("option "+l+" must be "+d,yt.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new yt("Unknown option "+l,yt.ERR_BAD_OPTION)}}var yp={assertOptions:gp,validators:Qi},ul=Ae,vp=el,fa=Hd,da=hp,br=ll,_p=sl,fl=yp,Zt=fl.validators;function ln(n){this.defaults=n,this.interceptors={request:new fa,response:new fa}}ln.prototype.request=function(t,r){typeof t=="string"?(r=r||{},r.url=t):r=t||{},r=br(this.defaults,r),r.method?r.method=r.method.toLowerCase():this.defaults.method?r.method=this.defaults.method.toLowerCase():r.method="get";var o=r.transitional;o!==void 0&&fl.assertOptions(o,{silentJSONParsing:Zt.transitional(Zt.boolean),forcedJSONParsing:Zt.transitional(Zt.boolean),clarifyTimeoutError:Zt.transitional(Zt.boolean)},!1);var s=[],l=!0;this.interceptors.request.forEach(function(A){typeof A.runWhen=="function"&&A.runWhen(r)===!1||(l=l&&A.synchronous,s.unshift(A.fulfilled,A.rejected))});var u=[];this.interceptors.response.forEach(function(A){u.push(A.fulfilled,A.rejected)});var f;if(!l){var d=[da,void 0];for(Array.prototype.unshift.apply(d,s),d=d.concat(u),f=Promise.resolve(r);d.length;)f=f.then(d.shift(),d.shift());return f}for(var p=r;s.length;){var h=s.shift(),v=s.shift();try{p=h(p)}catch(g){v(g);break}}try{f=da(p)}catch(g){return Promise.reject(g)}for(;u.length;)f=f.then(u.shift(),u.shift());return f};ln.prototype.getUri=function(t){t=br(this.defaults,t);var r=_p(t.baseURL,t.url);return vp(r,t.params,t.paramsSerializer)};ul.forEach(["delete","get","head","options"],function(t){ln.prototype[t]=function(r,o){return this.request(br(o||{},{method:t,url:r,data:(o||{}).data}))}});ul.forEach(["post","put","patch"],function(t){function r(o){return function(l,u,f){return this.request(br(f||{},{method:t,headers:o?{"Content-Type":"multipart/form-data"}:{},url:l,data:u}))}}ln.prototype[t]=r(),ln.prototype[t+"Form"]=r(!0)});var bp=ln,fi,pa;function wp(){if(pa)return fi;pa=1;var n=vr();function t(r){if(typeof r!="function")throw new TypeError("executor must be a function.");var o;this.promise=new Promise(function(u){o=u});var s=this;this.promise.then(function(l){if(s._listeners){var u,f=s._listeners.length;for(u=0;u<f;u++)s._listeners[u](l);s._listeners=null}}),this.promise.then=function(l){var u,f=new Promise(function(d){s.subscribe(d),u=d}).then(l);return f.cancel=function(){s.unsubscribe(u)},f},r(function(u){s.reason||(s.reason=new n(u),o(s.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.prototype.subscribe=function(o){if(this.reason){o(this.reason);return}this._listeners?this._listeners.push(o):this._listeners=[o]},t.prototype.unsubscribe=function(o){if(this._listeners){var s=this._listeners.indexOf(o);s!==-1&&this._listeners.splice(s,1)}},t.source=function(){var o,s=new t(function(u){o=u});return{token:s,cancel:o}},fi=t,fi}var di,ha;function Ep(){return ha||(ha=1,di=function(t){return function(o){return t.apply(null,o)}}),di}var pi,ma;function Ap(){if(ma)return pi;ma=1;var n=Ae;return pi=function(r){return n.isObject(r)&&r.isAxiosError===!0},pi}var ga=Ae,Sp=Ja,lr=bp,Op=ll,Cp=Gi;function dl(n){var t=new lr(n),r=Sp(lr.prototype.request,t);return ga.extend(r,lr.prototype,t),ga.extend(r,t),r.create=function(s){return dl(Op(n,s))},r}var Ne=dl(Cp);Ne.Axios=lr;Ne.CanceledError=vr();Ne.CancelToken=wp();Ne.isCancel=al();Ne.VERSION=cl().version;Ne.toFormData=ol;Ne.AxiosError=pn;Ne.Cancel=Ne.CanceledError;Ne.all=function(t){return Promise.all(t)};Ne.spread=Ep();Ne.isAxiosError=Ap();bd.exports=Ne;ur.default=Ne;(function(n){n.exports=ur})(_d);const Be=Zc(Ti);var xp=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),o=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(o)!=="[object Symbol]")return!1;var s=42;t[r]=s;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var l=Object.getOwnPropertySymbols(t);if(l.length!==1||l[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var u=Object.getOwnPropertyDescriptor(t,r);if(u.value!==s||u.enumerable!==!0)return!1}return!0},ya=typeof Symbol<"u"&&Symbol,Tp=xp,Pp=function(){return typeof ya!="function"||typeof Symbol!="function"||typeof ya("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:Tp()},Rp="Function.prototype.bind called on incompatible ",hi=Array.prototype.slice,kp=Object.prototype.toString,$p="[object Function]",Dp=function(t){var r=this;if(typeof r!="function"||kp.call(r)!==$p)throw new TypeError(Rp+r);for(var o=hi.call(arguments,1),s,l=function(){if(this instanceof s){var h=r.apply(this,o.concat(hi.call(arguments)));return Object(h)===h?h:this}else return r.apply(t,o.concat(hi.call(arguments)))},u=Math.max(0,r.length-o.length),f=[],d=0;d<u;d++)f.push("$"+d);if(s=Function("binder","return function ("+f.join(",")+"){ return binder.apply(this,arguments); }")(l),r.prototype){var p=function(){};p.prototype=r.prototype,s.prototype=new p,p.prototype=null}return s},Np=Dp,Ki=Function.prototype.bind||Np,Lp=Ki,Ip=Lp.call(Function.call,Object.prototype.hasOwnProperty),Q,cn=SyntaxError,pl=Function,rn=TypeError,mi=function(n){try{return pl('"use strict"; return ('+n+").constructor;")()}catch{}},Lt=Object.getOwnPropertyDescriptor;if(Lt)try{Lt({},"")}catch{Lt=null}var gi=function(){throw new rn},Mp=Lt?function(){try{return arguments.callee,gi}catch{try{return Lt(arguments,"callee").get}catch{return gi}}}():gi,en=Pp(),nt=Object.getPrototypeOf||function(n){return n.__proto__},nn={},Fp=typeof Uint8Array>"u"?Q:nt(Uint8Array),It={"%AggregateError%":typeof AggregateError>"u"?Q:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?Q:ArrayBuffer,"%ArrayIteratorPrototype%":en?nt([][Symbol.iterator]()):Q,"%AsyncFromSyncIteratorPrototype%":Q,"%AsyncFunction%":nn,"%AsyncGenerator%":nn,"%AsyncGeneratorFunction%":nn,"%AsyncIteratorPrototype%":nn,"%Atomics%":typeof Atomics>"u"?Q:Atomics,"%BigInt%":typeof BigInt>"u"?Q:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?Q:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?Q:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?Q:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?Q:Float32Array,"%Float64Array%":typeof Float64Array>"u"?Q:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?Q:FinalizationRegistry,"%Function%":pl,"%GeneratorFunction%":nn,"%Int8Array%":typeof Int8Array>"u"?Q:Int8Array,"%Int16Array%":typeof Int16Array>"u"?Q:Int16Array,"%Int32Array%":typeof Int32Array>"u"?Q:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":en?nt(nt([][Symbol.iterator]())):Q,"%JSON%":typeof JSON=="object"?JSON:Q,"%Map%":typeof Map>"u"?Q:Map,"%MapIteratorPrototype%":typeof Map>"u"||!en?Q:nt(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?Q:Promise,"%Proxy%":typeof Proxy>"u"?Q:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?Q:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?Q:Set,"%SetIteratorPrototype%":typeof Set>"u"||!en?Q:nt(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?Q:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":en?nt(""[Symbol.iterator]()):Q,"%Symbol%":en?Symbol:Q,"%SyntaxError%":cn,"%ThrowTypeError%":Mp,"%TypedArray%":Fp,"%TypeError%":rn,"%Uint8Array%":typeof Uint8Array>"u"?Q:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?Q:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?Q:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?Q:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?Q:WeakMap,"%WeakRef%":typeof WeakRef>"u"?Q:WeakRef,"%WeakSet%":typeof WeakSet>"u"?Q:WeakSet};try{null.error}catch(n){var Bp=nt(nt(n));It["%Error.prototype%"]=Bp}var jp=function n(t){var r;if(t==="%AsyncFunction%")r=mi("async function () {}");else if(t==="%GeneratorFunction%")r=mi("function* () {}");else if(t==="%AsyncGeneratorFunction%")r=mi("async function* () {}");else if(t==="%AsyncGenerator%"){var o=n("%AsyncGeneratorFunction%");o&&(r=o.prototype)}else if(t==="%AsyncIteratorPrototype%"){var s=n("%AsyncGenerator%");s&&(r=nt(s.prototype))}return It[t]=r,r},va={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Ln=Ki,dr=Ip,Up=Ln.call(Function.call,Array.prototype.concat),qp=Ln.call(Function.apply,Array.prototype.splice),_a=Ln.call(Function.call,String.prototype.replace),pr=Ln.call(Function.call,String.prototype.slice),Hp=Ln.call(Function.call,RegExp.prototype.exec),Wp=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,zp=/\\(\\)?/g,Vp=function(t){var r=pr(t,0,1),o=pr(t,-1);if(r==="%"&&o!=="%")throw new cn("invalid intrinsic syntax, expected closing `%`");if(o==="%"&&r!=="%")throw new cn("invalid intrinsic syntax, expected opening `%`");var s=[];return _a(t,Wp,function(l,u,f,d){s[s.length]=f?_a(d,zp,"$1"):u||l}),s},Gp=function(t,r){var o=t,s;if(dr(va,o)&&(s=va[o],o="%"+s[0]+"%"),dr(It,o)){var l=It[o];if(l===nn&&(l=jp(o)),typeof l>"u"&&!r)throw new rn("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:s,name:o,value:l}}throw new cn("intrinsic "+t+" does not exist!")},Xi=function(t,r){if(typeof t!="string"||t.length===0)throw new rn("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof r!="boolean")throw new rn('"allowMissing" argument must be a boolean');if(Hp(/^%?[^%]*%?$/,t)===null)throw new cn("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var o=Vp(t),s=o.length>0?o[0]:"",l=Gp("%"+s+"%",r),u=l.name,f=l.value,d=!1,p=l.alias;p&&(s=p[0],qp(o,Up([0,1],p)));for(var h=1,v=!0;h<o.length;h+=1){var g=o[h],A=pr(g,0,1),T=pr(g,-1);if((A==='"'||A==="'"||A==="`"||T==='"'||T==="'"||T==="`")&&A!==T)throw new cn("property names with quotes must have matching quotes");if((g==="constructor"||!v)&&(d=!0),s+="."+g,u="%"+s+"%",dr(It,u))f=It[u];else if(f!=null){if(!(g in f)){if(!r)throw new rn("base intrinsic for "+t+" exists, but the property is not available.");return}if(Lt&&h+1>=o.length){var F=Lt(f,g);v=!!F,v&&"get"in F&&!("originalValue"in F.get)?f=F.get:f=f[g]}else v=dr(f,g),f=f[g];v&&!d&&(It[u]=f)}}return f},Ri={},Qp={get exports(){return Ri},set exports(n){Ri=n}};(function(n){var t=Ki,r=Xi,o=r("%Function.prototype.apply%"),s=r("%Function.prototype.call%"),l=r("%Reflect.apply%",!0)||t.call(s,o),u=r("%Object.getOwnPropertyDescriptor%",!0),f=r("%Object.defineProperty%",!0),d=r("%Math.max%");if(f)try{f({},"a",{value:1})}catch{f=null}n.exports=function(v){var g=l(t,s,arguments);if(u&&f){var A=u(g,"length");A.configurable&&f(g,"length",{value:1+d(0,v.length-(arguments.length-1))})}return g};var p=function(){return l(t,o,arguments)};f?f(n.exports,"apply",{value:p}):n.exports.apply=p})(Qp);var hl=Xi,ml=Ri,Kp=ml(hl("String.prototype.indexOf")),Xp=function(t,r){var o=hl(t,!!r);return typeof o=="function"&&Kp(t,".prototype.")>-1?ml(o):o};const Jp={},Yp=Object.freeze(Object.defineProperty({__proto__:null,default:Jp},Symbol.toStringTag,{value:"Module"})),Zp=eu(Yp);var Ji=typeof Map=="function"&&Map.prototype,yi=Object.getOwnPropertyDescriptor&&Ji?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,hr=Ji&&yi&&typeof yi.get=="function"?yi.get:null,ba=Ji&&Map.prototype.forEach,Yi=typeof Set=="function"&&Set.prototype,vi=Object.getOwnPropertyDescriptor&&Yi?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,mr=Yi&&vi&&typeof vi.get=="function"?vi.get:null,wa=Yi&&Set.prototype.forEach,eh=typeof WeakMap=="function"&&WeakMap.prototype,Pn=eh?WeakMap.prototype.has:null,th=typeof WeakSet=="function"&&WeakSet.prototype,Rn=th?WeakSet.prototype.has:null,nh=typeof WeakRef=="function"&&WeakRef.prototype,Ea=nh?WeakRef.prototype.deref:null,rh=Boolean.prototype.valueOf,ih=Object.prototype.toString,oh=Function.prototype.toString,sh=String.prototype.match,Zi=String.prototype.slice,bt=String.prototype.replace,ah=String.prototype.toUpperCase,Aa=String.prototype.toLowerCase,gl=RegExp.prototype.test,Sa=Array.prototype.concat,rt=Array.prototype.join,lh=Array.prototype.slice,Oa=Math.floor,ki=typeof BigInt=="function"?BigInt.prototype.valueOf:null,_i=Object.getOwnPropertySymbols,$i=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,un=typeof Symbol=="function"&&typeof Symbol.iterator=="object",Ce=typeof Symbol=="function"&&Symbol.toStringTag&&(typeof Symbol.toStringTag===un||"symbol")?Symbol.toStringTag:null,yl=Object.prototype.propertyIsEnumerable,Ca=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(n){return n.__proto__}:null);function xa(n,t){if(n===1/0||n===-1/0||n!==n||n&&n>-1e3&&n<1e3||gl.call(/e/,t))return t;var r=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if(typeof n=="number"){var o=n<0?-Oa(-n):Oa(n);if(o!==n){var s=String(o),l=Zi.call(t,s.length+1);return bt.call(s,r,"$&_")+"."+bt.call(bt.call(l,/([0-9]{3})/g,"$&_"),/_$/,"")}}return bt.call(t,r,"$&_")}var Di=Zp,Ta=Di.custom,Pa=_l(Ta)?Ta:null,ch=function n(t,r,o,s){var l=r||{};if(vt(l,"quoteStyle")&&l.quoteStyle!=="single"&&l.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if(vt(l,"maxStringLength")&&(typeof l.maxStringLength=="number"?l.maxStringLength<0&&l.maxStringLength!==1/0:l.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var u=vt(l,"customInspect")?l.customInspect:!0;if(typeof u!="boolean"&&u!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(vt(l,"indent")&&l.indent!==null&&l.indent!=="	"&&!(parseInt(l.indent,10)===l.indent&&l.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(vt(l,"numericSeparator")&&typeof l.numericSeparator!="boolean")throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var f=l.numericSeparator;if(typeof t>"u")return"undefined";if(t===null)return"null";if(typeof t=="boolean")return t?"true":"false";if(typeof t=="string")return wl(t,l);if(typeof t=="number"){if(t===0)return 1/0/t>0?"0":"-0";var d=String(t);return f?xa(t,d):d}if(typeof t=="bigint"){var p=String(t)+"n";return f?xa(t,p):p}var h=typeof l.depth>"u"?5:l.depth;if(typeof o>"u"&&(o=0),o>=h&&h>0&&typeof t=="object")return Ni(t)?"[Array]":"[Object]";var v=xh(l,o);if(typeof s>"u")s=[];else if(bl(s,t)>=0)return"[Circular]";function g(ue,ce,_e){if(ce&&(s=lh.call(s),s.push(ce)),_e){var be={depth:l.depth};return vt(l,"quoteStyle")&&(be.quoteStyle=l.quoteStyle),n(ue,be,o+1,s)}return n(ue,l,o+1,s)}if(typeof t=="function"&&!Ra(t)){var A=vh(t),T=ir(t,g);return"[Function"+(A?": "+A:" (anonymous)")+"]"+(T.length>0?" { "+rt.call(T,", ")+" }":"")}if(_l(t)){var F=un?bt.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):$i.call(t);return typeof t=="object"&&!un?On(F):F}if(Sh(t)){for(var I="<"+Aa.call(String(t.nodeName)),O=t.attributes||[],N=0;N<O.length;N++)I+=" "+O[N].name+"="+vl(uh(O[N].value),"double",l);return I+=">",t.childNodes&&t.childNodes.length&&(I+="..."),I+="</"+Aa.call(String(t.nodeName))+">",I}if(Ni(t)){if(t.length===0)return"[]";var X=ir(t,g);return v&&!Ch(X)?"["+Li(X,v)+"]":"[ "+rt.call(X,", ")+" ]"}if(dh(t)){var ae=ir(t,g);return!("cause"in Error.prototype)&&"cause"in t&&!yl.call(t,"cause")?"{ ["+String(t)+"] "+rt.call(Sa.call("[cause]: "+g(t.cause),ae),", ")+" }":ae.length===0?"["+String(t)+"]":"{ ["+String(t)+"] "+rt.call(ae,", ")+" }"}if(typeof t=="object"&&u){if(Pa&&typeof t[Pa]=="function"&&Di)return Di(t,{depth:h-o});if(u!=="symbol"&&typeof t.inspect=="function")return t.inspect()}if(_h(t)){var L=[];return ba&&ba.call(t,function(ue,ce){L.push(g(ce,t,!0)+" => "+g(ue,t))}),ka("Map",hr.call(t),L,v)}if(Eh(t)){var de=[];return wa&&wa.call(t,function(ue){de.push(g(ue,t))}),ka("Set",mr.call(t),de,v)}if(bh(t))return bi("WeakMap");if(Ah(t))return bi("WeakSet");if(wh(t))return bi("WeakRef");if(hh(t))return On(g(Number(t)));if(gh(t))return On(g(ki.call(t)));if(mh(t))return On(rh.call(t));if(ph(t))return On(g(String(t)));if(!fh(t)&&!Ra(t)){var ye=ir(t,g),xe=Ca?Ca(t)===Object.prototype:t instanceof Object||t.constructor===Object,ve=t instanceof Object?"":"null prototype",Te=!xe&&Ce&&Object(t)===t&&Ce in t?Zi.call(wt(t),8,-1):ve?"Object":"",Se=xe||typeof t.constructor!="function"?"":t.constructor.name?t.constructor.name+" ":"",ie=Se+(Te||ve?"["+rt.call(Sa.call([],Te||[],ve||[]),": ")+"] ":"");return ye.length===0?ie+"{}":v?ie+"{"+Li(ye,v)+"}":ie+"{ "+rt.call(ye,", ")+" }"}return String(t)};function vl(n,t,r){var o=(r.quoteStyle||t)==="double"?'"':"'";return o+n+o}function uh(n){return bt.call(String(n),/"/g,"&quot;")}function Ni(n){return wt(n)==="[object Array]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function fh(n){return wt(n)==="[object Date]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function Ra(n){return wt(n)==="[object RegExp]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function dh(n){return wt(n)==="[object Error]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function ph(n){return wt(n)==="[object String]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function hh(n){return wt(n)==="[object Number]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function mh(n){return wt(n)==="[object Boolean]"&&(!Ce||!(typeof n=="object"&&Ce in n))}function _l(n){if(un)return n&&typeof n=="object"&&n instanceof Symbol;if(typeof n=="symbol")return!0;if(!n||typeof n!="object"||!$i)return!1;try{return $i.call(n),!0}catch{}return!1}function gh(n){if(!n||typeof n!="object"||!ki)return!1;try{return ki.call(n),!0}catch{}return!1}var yh=Object.prototype.hasOwnProperty||function(n){return n in this};function vt(n,t){return yh.call(n,t)}function wt(n){return ih.call(n)}function vh(n){if(n.name)return n.name;var t=sh.call(oh.call(n),/^function\s*([\w$]+)/);return t?t[1]:null}function bl(n,t){if(n.indexOf)return n.indexOf(t);for(var r=0,o=n.length;r<o;r++)if(n[r]===t)return r;return-1}function _h(n){if(!hr||!n||typeof n!="object")return!1;try{hr.call(n);try{mr.call(n)}catch{return!0}return n instanceof Map}catch{}return!1}function bh(n){if(!Pn||!n||typeof n!="object")return!1;try{Pn.call(n,Pn);try{Rn.call(n,Rn)}catch{return!0}return n instanceof WeakMap}catch{}return!1}function wh(n){if(!Ea||!n||typeof n!="object")return!1;try{return Ea.call(n),!0}catch{}return!1}function Eh(n){if(!mr||!n||typeof n!="object")return!1;try{mr.call(n);try{hr.call(n)}catch{return!0}return n instanceof Set}catch{}return!1}function Ah(n){if(!Rn||!n||typeof n!="object")return!1;try{Rn.call(n,Rn);try{Pn.call(n,Pn)}catch{return!0}return n instanceof WeakSet}catch{}return!1}function Sh(n){return!n||typeof n!="object"?!1:typeof HTMLElement<"u"&&n instanceof HTMLElement?!0:typeof n.nodeName=="string"&&typeof n.getAttribute=="function"}function wl(n,t){if(n.length>t.maxStringLength){var r=n.length-t.maxStringLength,o="... "+r+" more character"+(r>1?"s":"");return wl(Zi.call(n,0,t.maxStringLength),t)+o}var s=bt.call(bt.call(n,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,Oh);return vl(s,"single",t)}function Oh(n){var t=n.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return r?"\\"+r:"\\x"+(t<16?"0":"")+ah.call(t.toString(16))}function On(n){return"Object("+n+")"}function bi(n){return n+" { ? }"}function ka(n,t,r,o){var s=o?Li(r,o):rt.call(r,", ");return n+" ("+t+") {"+s+"}"}function Ch(n){for(var t=0;t<n.length;t++)if(bl(n[t],`
`)>=0)return!1;return!0}function xh(n,t){var r;if(n.indent==="	")r="	";else if(typeof n.indent=="number"&&n.indent>0)r=rt.call(Array(n.indent+1)," ");else return null;return{base:r,prev:rt.call(Array(t+1),r)}}function Li(n,t){if(n.length===0)return"";var r=`
`+t.prev+t.base;return r+rt.call(n,","+r)+`
`+t.prev}function ir(n,t){var r=Ni(n),o=[];if(r){o.length=n.length;for(var s=0;s<n.length;s++)o[s]=vt(n,s)?t(n[s],n):""}var l=typeof _i=="function"?_i(n):[],u;if(un){u={};for(var f=0;f<l.length;f++)u["$"+l[f]]=l[f]}for(var d in n)vt(n,d)&&(r&&String(Number(d))===d&&d<n.length||un&&u["$"+d]instanceof Symbol||(gl.call(/[^\w$]/,d)?o.push(t(d,n)+": "+t(n[d],n)):o.push(d+": "+t(n[d],n))));if(typeof _i=="function")for(var p=0;p<l.length;p++)yl.call(n,l[p])&&o.push("["+t(l[p])+"]: "+t(n[l[p]],n));return o}var eo=Xi,hn=Xp,Th=ch,Ph=eo("%TypeError%"),or=eo("%WeakMap%",!0),sr=eo("%Map%",!0),Rh=hn("WeakMap.prototype.get",!0),kh=hn("WeakMap.prototype.set",!0),$h=hn("WeakMap.prototype.has",!0),Dh=hn("Map.prototype.get",!0),Nh=hn("Map.prototype.set",!0),Lh=hn("Map.prototype.has",!0),to=function(n,t){for(var r=n,o;(o=r.next)!==null;r=o)if(o.key===t)return r.next=o.next,o.next=n.next,n.next=o,o},Ih=function(n,t){var r=to(n,t);return r&&r.value},Mh=function(n,t,r){var o=to(n,t);o?o.value=r:n.next={key:t,next:n.next,value:r}},Fh=function(n,t){return!!to(n,t)},Bh=function(){var t,r,o,s={assert:function(l){if(!s.has(l))throw new Ph("Side channel does not contain "+Th(l))},get:function(l){if(or&&l&&(typeof l=="object"||typeof l=="function")){if(t)return Rh(t,l)}else if(sr){if(r)return Dh(r,l)}else if(o)return Ih(o,l)},has:function(l){if(or&&l&&(typeof l=="object"||typeof l=="function")){if(t)return $h(t,l)}else if(sr){if(r)return Lh(r,l)}else if(o)return Fh(o,l);return!1},set:function(l,u){or&&l&&(typeof l=="object"||typeof l=="function")?(t||(t=new or),kh(t,l,u)):sr?(r||(r=new sr),Nh(r,l,u)):(o||(o={key:{},next:null}),Mh(o,l,u))}};return s},jh=String.prototype.replace,Uh=/%20/g,wi={RFC1738:"RFC1738",RFC3986:"RFC3986"},no={default:wi.RFC3986,formatters:{RFC1738:function(n){return jh.call(n,Uh,"+")},RFC3986:function(n){return String(n)}},RFC1738:wi.RFC1738,RFC3986:wi.RFC3986},qh=no,Ei=Object.prototype.hasOwnProperty,Dt=Array.isArray,tt=function(){for(var n=[],t=0;t<256;++t)n.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return n}(),Hh=function(t){for(;t.length>1;){var r=t.pop(),o=r.obj[r.prop];if(Dt(o)){for(var s=[],l=0;l<o.length;++l)typeof o[l]<"u"&&s.push(o[l]);r.obj[r.prop]=s}}},El=function(t,r){for(var o=r&&r.plainObjects?Object.create(null):{},s=0;s<t.length;++s)typeof t[s]<"u"&&(o[s]=t[s]);return o},Wh=function n(t,r,o){if(!r)return t;if(typeof r!="object"){if(Dt(t))t.push(r);else if(t&&typeof t=="object")(o&&(o.plainObjects||o.allowPrototypes)||!Ei.call(Object.prototype,r))&&(t[r]=!0);else return[t,r];return t}if(!t||typeof t!="object")return[t].concat(r);var s=t;return Dt(t)&&!Dt(r)&&(s=El(t,o)),Dt(t)&&Dt(r)?(r.forEach(function(l,u){if(Ei.call(t,u)){var f=t[u];f&&typeof f=="object"&&l&&typeof l=="object"?t[u]=n(f,l,o):t.push(l)}else t[u]=l}),t):Object.keys(r).reduce(function(l,u){var f=r[u];return Ei.call(l,u)?l[u]=n(l[u],f,o):l[u]=f,l},s)},zh=function(t,r){return Object.keys(r).reduce(function(o,s){return o[s]=r[s],o},t)},Vh=function(n,t,r){var o=n.replace(/\+/g," ");if(r==="iso-8859-1")return o.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(o)}catch{return o}},Gh=function(t,r,o,s,l){if(t.length===0)return t;var u=t;if(typeof t=="symbol"?u=Symbol.prototype.toString.call(t):typeof t!="string"&&(u=String(t)),o==="iso-8859-1")return escape(u).replace(/%u[0-9a-f]{4}/gi,function(h){return"%26%23"+parseInt(h.slice(2),16)+"%3B"});for(var f="",d=0;d<u.length;++d){var p=u.charCodeAt(d);if(p===45||p===46||p===95||p===126||p>=48&&p<=57||p>=65&&p<=90||p>=97&&p<=122||l===qh.RFC1738&&(p===40||p===41)){f+=u.charAt(d);continue}if(p<128){f=f+tt[p];continue}if(p<2048){f=f+(tt[192|p>>6]+tt[128|p&63]);continue}if(p<55296||p>=57344){f=f+(tt[224|p>>12]+tt[128|p>>6&63]+tt[128|p&63]);continue}d+=1,p=65536+((p&1023)<<10|u.charCodeAt(d)&1023),f+=tt[240|p>>18]+tt[128|p>>12&63]+tt[128|p>>6&63]+tt[128|p&63]}return f},Qh=function(t){for(var r=[{obj:{o:t},prop:"o"}],o=[],s=0;s<r.length;++s)for(var l=r[s],u=l.obj[l.prop],f=Object.keys(u),d=0;d<f.length;++d){var p=f[d],h=u[p];typeof h=="object"&&h!==null&&o.indexOf(h)===-1&&(r.push({obj:u,prop:p}),o.push(h))}return Hh(r),t},Kh=function(t){return Object.prototype.toString.call(t)==="[object RegExp]"},Xh=function(t){return!t||typeof t!="object"?!1:!!(t.constructor&&t.constructor.isBuffer&&t.constructor.isBuffer(t))},Jh=function(t,r){return[].concat(t,r)},Yh=function(t,r){if(Dt(t)){for(var o=[],s=0;s<t.length;s+=1)o.push(r(t[s]));return o}return r(t)},Al={arrayToObject:El,assign:zh,combine:Jh,compact:Qh,decode:Vh,encode:Gh,isBuffer:Xh,isRegExp:Kh,maybeMap:Yh,merge:Wh},Sl=Bh,Ii=Al,kn=no,Zh=Object.prototype.hasOwnProperty,$a={brackets:function(t){return t+"[]"},comma:"comma",indices:function(t,r){return t+"["+r+"]"},repeat:function(t){return t}},dt=Array.isArray,em=String.prototype.split,tm=Array.prototype.push,Ol=function(n,t){tm.apply(n,dt(t)?t:[t])},nm=Date.prototype.toISOString,Da=kn.default,Ee={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:Ii.encode,encodeValuesOnly:!1,format:Da,formatter:kn.formatters[Da],indices:!1,serializeDate:function(t){return nm.call(t)},skipNulls:!1,strictNullHandling:!1},rm=function(t){return typeof t=="string"||typeof t=="number"||typeof t=="boolean"||typeof t=="symbol"||typeof t=="bigint"},Ai={},im=function n(t,r,o,s,l,u,f,d,p,h,v,g,A,T,F,I){for(var O=t,N=I,X=0,ae=!1;(N=N.get(Ai))!==void 0&&!ae;){var L=N.get(t);if(X+=1,typeof L<"u"){if(L===X)throw new RangeError("Cyclic object value");ae=!0}typeof N.get(Ai)>"u"&&(X=0)}if(typeof d=="function"?O=d(r,O):O instanceof Date?O=v(O):o==="comma"&&dt(O)&&(O=Ii.maybeMap(O,function(Xe){return Xe instanceof Date?v(Xe):Xe})),O===null){if(l)return f&&!T?f(r,Ee.encoder,F,"key",g):r;O=""}if(rm(O)||Ii.isBuffer(O)){if(f){var de=T?r:f(r,Ee.encoder,F,"key",g);if(o==="comma"&&T){for(var ye=em.call(String(O),","),xe="",ve=0;ve<ye.length;++ve)xe+=(ve===0?"":",")+A(f(ye[ve],Ee.encoder,F,"value",g));return[A(de)+(s&&dt(O)&&ye.length===1?"[]":"")+"="+xe]}return[A(de)+"="+A(f(O,Ee.encoder,F,"value",g))]}return[A(r)+"="+A(String(O))]}var Te=[];if(typeof O>"u")return Te;var Se;if(o==="comma"&&dt(O))Se=[{value:O.length>0?O.join(",")||null:void 0}];else if(dt(d))Se=d;else{var ie=Object.keys(O);Se=p?ie.sort(p):ie}for(var ue=s&&dt(O)&&O.length===1?r+"[]":r,ce=0;ce<Se.length;++ce){var _e=Se[ce],be=typeof _e=="object"&&typeof _e.value<"u"?_e.value:O[_e];if(!(u&&be===null)){var at=dt(O)?typeof o=="function"?o(ue,_e):ue:ue+(h?"."+_e:"["+_e+"]");I.set(t,X);var Ft=Sl();Ft.set(Ai,I),Ol(Te,n(be,at,o,s,l,u,f,d,p,h,v,g,A,T,F,Ft))}}return Te},om=function(t){if(!t)return Ee;if(t.encoder!==null&&typeof t.encoder<"u"&&typeof t.encoder!="function")throw new TypeError("Encoder has to be a function.");var r=t.charset||Ee.charset;if(typeof t.charset<"u"&&t.charset!=="utf-8"&&t.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var o=kn.default;if(typeof t.format<"u"){if(!Zh.call(kn.formatters,t.format))throw new TypeError("Unknown format option provided.");o=t.format}var s=kn.formatters[o],l=Ee.filter;return(typeof t.filter=="function"||dt(t.filter))&&(l=t.filter),{addQueryPrefix:typeof t.addQueryPrefix=="boolean"?t.addQueryPrefix:Ee.addQueryPrefix,allowDots:typeof t.allowDots>"u"?Ee.allowDots:!!t.allowDots,charset:r,charsetSentinel:typeof t.charsetSentinel=="boolean"?t.charsetSentinel:Ee.charsetSentinel,delimiter:typeof t.delimiter>"u"?Ee.delimiter:t.delimiter,encode:typeof t.encode=="boolean"?t.encode:Ee.encode,encoder:typeof t.encoder=="function"?t.encoder:Ee.encoder,encodeValuesOnly:typeof t.encodeValuesOnly=="boolean"?t.encodeValuesOnly:Ee.encodeValuesOnly,filter:l,format:o,formatter:s,serializeDate:typeof t.serializeDate=="function"?t.serializeDate:Ee.serializeDate,skipNulls:typeof t.skipNulls=="boolean"?t.skipNulls:Ee.skipNulls,sort:typeof t.sort=="function"?t.sort:null,strictNullHandling:typeof t.strictNullHandling=="boolean"?t.strictNullHandling:Ee.strictNullHandling}},sm=function(n,t){var r=n,o=om(t),s,l;typeof o.filter=="function"?(l=o.filter,r=l("",r)):dt(o.filter)&&(l=o.filter,s=l);var u=[];if(typeof r!="object"||r===null)return"";var f;t&&t.arrayFormat in $a?f=t.arrayFormat:t&&"indices"in t?f=t.indices?"indices":"repeat":f="indices";var d=$a[f];if(t&&"commaRoundTrip"in t&&typeof t.commaRoundTrip!="boolean")throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var p=d==="comma"&&t&&t.commaRoundTrip;s||(s=Object.keys(r)),o.sort&&s.sort(o.sort);for(var h=Sl(),v=0;v<s.length;++v){var g=s[v];o.skipNulls&&r[g]===null||Ol(u,im(r[g],g,d,p,o.strictNullHandling,o.skipNulls,o.encode?o.encoder:null,o.filter,o.sort,o.allowDots,o.serializeDate,o.format,o.formatter,o.encodeValuesOnly,o.charset,h))}var A=u.join(o.delimiter),T=o.addQueryPrefix===!0?"?":"";return o.charsetSentinel&&(o.charset==="iso-8859-1"?T+="utf8=%26%2310003%3B&":T+="utf8=%E2%9C%93&"),A.length>0?T+A:""},fn=Al,Mi=Object.prototype.hasOwnProperty,am=Array.isArray,me={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:fn.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},lm=function(n){return n.replace(/&#(\d+);/g,function(t,r){return String.fromCharCode(parseInt(r,10))})},Cl=function(n,t){return n&&typeof n=="string"&&t.comma&&n.indexOf(",")>-1?n.split(","):n},cm="utf8=%26%2310003%3B",um="utf8=%E2%9C%93",fm=function(t,r){var o={},s=r.ignoreQueryPrefix?t.replace(/^\?/,""):t,l=r.parameterLimit===1/0?void 0:r.parameterLimit,u=s.split(r.delimiter,l),f=-1,d,p=r.charset;if(r.charsetSentinel)for(d=0;d<u.length;++d)u[d].indexOf("utf8=")===0&&(u[d]===um?p="utf-8":u[d]===cm&&(p="iso-8859-1"),f=d,d=u.length);for(d=0;d<u.length;++d)if(d!==f){var h=u[d],v=h.indexOf("]="),g=v===-1?h.indexOf("="):v+1,A,T;g===-1?(A=r.decoder(h,me.decoder,p,"key"),T=r.strictNullHandling?null:""):(A=r.decoder(h.slice(0,g),me.decoder,p,"key"),T=fn.maybeMap(Cl(h.slice(g+1),r),function(F){return r.decoder(F,me.decoder,p,"value")})),T&&r.interpretNumericEntities&&p==="iso-8859-1"&&(T=lm(T)),h.indexOf("[]=")>-1&&(T=am(T)?[T]:T),Mi.call(o,A)?o[A]=fn.combine(o[A],T):o[A]=T}return o},dm=function(n,t,r,o){for(var s=o?t:Cl(t,r),l=n.length-1;l>=0;--l){var u,f=n[l];if(f==="[]"&&r.parseArrays)u=[].concat(s);else{u=r.plainObjects?Object.create(null):{};var d=f.charAt(0)==="["&&f.charAt(f.length-1)==="]"?f.slice(1,-1):f,p=parseInt(d,10);!r.parseArrays&&d===""?u={0:s}:!isNaN(p)&&f!==d&&String(p)===d&&p>=0&&r.parseArrays&&p<=r.arrayLimit?(u=[],u[p]=s):d!=="__proto__"&&(u[d]=s)}s=u}return s},pm=function(t,r,o,s){if(t){var l=o.allowDots?t.replace(/\.([^.[]+)/g,"[$1]"):t,u=/(\[[^[\]]*])/,f=/(\[[^[\]]*])/g,d=o.depth>0&&u.exec(l),p=d?l.slice(0,d.index):l,h=[];if(p){if(!o.plainObjects&&Mi.call(Object.prototype,p)&&!o.allowPrototypes)return;h.push(p)}for(var v=0;o.depth>0&&(d=f.exec(l))!==null&&v<o.depth;){if(v+=1,!o.plainObjects&&Mi.call(Object.prototype,d[1].slice(1,-1))&&!o.allowPrototypes)return;h.push(d[1])}return d&&h.push("["+l.slice(d.index)+"]"),dm(h,r,o,s)}},hm=function(t){if(!t)return me;if(t.decoder!==null&&t.decoder!==void 0&&typeof t.decoder!="function")throw new TypeError("Decoder has to be a function.");if(typeof t.charset<"u"&&t.charset!=="utf-8"&&t.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=typeof t.charset>"u"?me.charset:t.charset;return{allowDots:typeof t.allowDots>"u"?me.allowDots:!!t.allowDots,allowPrototypes:typeof t.allowPrototypes=="boolean"?t.allowPrototypes:me.allowPrototypes,allowSparse:typeof t.allowSparse=="boolean"?t.allowSparse:me.allowSparse,arrayLimit:typeof t.arrayLimit=="number"?t.arrayLimit:me.arrayLimit,charset:r,charsetSentinel:typeof t.charsetSentinel=="boolean"?t.charsetSentinel:me.charsetSentinel,comma:typeof t.comma=="boolean"?t.comma:me.comma,decoder:typeof t.decoder=="function"?t.decoder:me.decoder,delimiter:typeof t.delimiter=="string"||fn.isRegExp(t.delimiter)?t.delimiter:me.delimiter,depth:typeof t.depth=="number"||t.depth===!1?+t.depth:me.depth,ignoreQueryPrefix:t.ignoreQueryPrefix===!0,interpretNumericEntities:typeof t.interpretNumericEntities=="boolean"?t.interpretNumericEntities:me.interpretNumericEntities,parameterLimit:typeof t.parameterLimit=="number"?t.parameterLimit:me.parameterLimit,parseArrays:t.parseArrays!==!1,plainObjects:typeof t.plainObjects=="boolean"?t.plainObjects:me.plainObjects,strictNullHandling:typeof t.strictNullHandling=="boolean"?t.strictNullHandling:me.strictNullHandling}},mm=function(n,t){var r=hm(t);if(n===""||n===null||typeof n>"u")return r.plainObjects?Object.create(null):{};for(var o=typeof n=="string"?fm(n,r):n,s=r.plainObjects?Object.create(null):{},l=Object.keys(o),u=0;u<l.length;++u){var f=l[u],d=pm(f,o[f],r,typeof n=="string");s=fn.merge(s,d,r)}return r.allowSparse===!0?s:fn.compact(s)},gm=sm,ym=mm,vm=no,_m={formats:vm,parse:ym,stringify:gm};const Na="select (count(*) as ?count) {?s ?p ?o}",La="select ?g (count(*) as ?count) {graph ?g {?s ?p ?o}} group by ?g";class bm{constructor(t){this.isOffline=!0,this.pathname=t.pathname}getFusekiUrl(t){let r=t;for(;r.startsWith("/")&&r.length>0;)r=r.slice(1);return`${this.pathname.endsWith("/")?this.pathname:`${this.pathname}/`}${r}`}async getServerData(){return(await Be.get(this.getFusekiUrl("/$/server"))).data}async getServerStatus(){const t=new Date().getTime();try{return await Be.get(this.getFusekiUrl("/$/ping")),this.isOffline&&Dn.emit("connection:reset"),this.isOffline=!1,new Ps(!0,`Last ping returned OK in ${this._duration(t)}ms`)}catch(r){return this.isOffline=!0,new Ps(!1,`Last ping returned "${r}" in ${this._duration(t)}ms`)}}_duration(t){return new Date().getTime()-t}async getDatasetStats(t){return(await Be.get(this.getFusekiUrl(`/$/stats/${t}`))).data}async getDatasetSize(t,r){const o=await Promise.all([Be.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:Na}}),Be.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:La}})]),s={},l=o[0];return s["default graph"]=l.data.results.bindings[0].count.value,o[1].data.results.bindings.forEach(f=>{s[f.g.value]=f.count.value}),s}async deleteDataset(t){await Be.delete(this.getFusekiUrl(`/$/datasets${t}`))}async backupDataset(t){return await Be.post(this.getFusekiUrl(`/$/backup${t}`))}async createDataset(t,r){const o=_m.stringify({dbName:t,dbType:r}),s={"Content-Type":"application/x-www-form-urlencoded"};try{await Be.post(this.getFusekiUrl("/$/datasets"),o,{headers:s})}catch(l){throw l.response&&l.response.status!==200?l.response.status===409?new Error(`failed to create dataset "${t}", reason: there is another dataset with the same name`):new Error(`failed to create dataset "${t}" with type ${r}, reason: HTTP status: "${l.response.status}", message: ${l.response.statusText}`):l}}async getTasks(){return Be.get(this.getFusekiUrl("/$/tasks"))}async countGraphsTriples(t,r){const o=await Promise.all([Be.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:Na}}),Be.get(this.getFusekiUrl(`/${t}/${r}`),{params:{query:La}})]),s={},l=o[0];return s.default=l.data.results.bindings[0].count.value,o[1].data.results.bindings.forEach(f=>{s[f.g.value]=f.count.value}),s}getDataEndpoint(t){return t.find(r=>r!=="")||""}async fetchGraph(t,r,o){const s=this.getDataEndpoint(r),l=`${t}/${s}`;return await Be.get(this.getFusekiUrl(l),{params:{graph:o},headers:{Accept:"text/turtle; charset=utf-8"}})}async saveGraph(t,r,o,s){const l=this.getDataEndpoint(r),u=`${t}/${l}`;return await Be.put(this.getFusekiUrl(u),s,{params:{graph:o},headers:{Accept:"application/json, text/javascript, */*; q=0.01","Content-Type":"text/turtle; charset=UTF-8"}}).catch(f=>{throw new Error(f.response.data)})}}const wm={install(n){n.config.globalProperties.$fusekiService=new bm(window.location)}},wr=tu(xu);wr.use(ld);wr.use(wm);wr.use(vd);wr.mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
